name: tests

on:

  push:
    branches:
      - master
      - development
    paths-ignore:
      - '*.rst'
      - 'AUTHORS'
      - 'COPYING'
      - 'doc/**'
      - 'install-sarah'

  pull_request:
    branches:
      - master
      - development
    paths-ignore:
      - '*.rst'
      - 'AUTHORS'
      - 'COPYING'
      - 'doc/**'
      - 'install-sarah'

jobs:
  no-meta:
    strategy:
      matrix:
        OS: [macos-10.15, ubuntu-latest]
        CXXCOMPILER: [g++, clang++]
    runs-on: ${{ matrix.OS }}
    if: false

    steps:
      - name: Homebrew
        if: runner.os == 'macOS'
        run: |
          brew update
          brew upgrade
          brew reinstall gcc
          brew install gsl

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install conan
        run: |
          pip3 install --user conan
          export PATH=$(python3 -c 'import site; print(site.USER_BASE + "/bin")'):$PATH
          conan profile new default --detect

      - name: Setup conan
        run: |
          export PATH=$(python3 -c 'import site; print(site.USER_BASE + "/bin")'):$PATH
          conan profile update settings.compiler.libcxx=libstdc++11 default
        env:
          CXX: ${{ matrix.CXXCOMPILER }}
        if: ${{ runner.os == 'Linux' }}

      - name: Install dependencies
        run: |
          export PATH=$(python3 -c 'import site; print(site.USER_BASE + "/bin")'):$PATH
          conan remote add conan-hep https://api.bintray.com/conan/expander/conan-hep --force
          conan install . --build=missing

      - name: Configure
        env:
          CXXCOMPILER: ${{ matrix.CXXCOMPILER }}
        run: |
          ./configure \
            --with-cxxflags="-std=c++14 -fPIC" \
            --with-cxx=$CXXCOMPILER \
            --with-optional-modules=test \
            --with-loop-libraries=collier,looptools \
            --with-install-dir=install \
            --disable-meta
          make showbuild

      - name: Make
        run: make -j2

      - name: Build compiled tests
        run: make -j2 alltest

      - name: Run compiled and shell script (Softsusy)
        # Makefile doesn't know about FLEXIBLESUSY_LOOP_LIBRARY flag so tests are not
        # re-run on FLEXIBLESUSY_LOOP_LIBRARY change. Every run must clean logs after itself.
        run: |
          FLEXIBLESUSY_LOOP_LIBRARY=0 make -j2 execute-compiled-tests execute-shell-tests
          make clean-test-log

      - name: Run compiled and shell script (Collier)
        run: |
          FLEXIBLESUSY_LOOP_LIBRARY=1 make -j2 execute-compiled-tests execute-shell-tests
          make clean-test-log

      - name: Run compiled and shell script (LoopTools)
        run: |
          FLEXIBLESUSY_LOOP_LIBRARY=2 make -j2 execute-compiled-tests execute-shell-tests
          make clean-test-log

      - name: Run compiled and shell script (fflite)
        run: |
          FLEXIBLESUSY_LOOP_LIBRARY=3 make -j2 execute-compiled-tests execute-shell-tests
          make clean-test-log

      - name: Install
        run: make install-src

  with-meta:

    # Pull requests don't share secrets with a fork so we run tests only on PRs
    # comming from the FlexibleSUSY/FlexibleSUSY repo.
    # For non PR triggers we check for the name of the repo so that if someone
    # forks FS github doesn't try to run tests on their code.
    if: (!github.event.pull_request && github.repository == 'FlexibleSUSY/FlexibleSUSY') || github.event.pull_request.head.repo.url == 'https://api.github.com/repos/FlexibleSUSY/FlexibleSUSY'

    runs-on: ubuntu-latest
    container:
      image: navir/opensuseleap-for-flexiblesusy:0.9.6

    strategy:
      matrix:
        COMPILER: [intel]
        PART:     [1, 2]

    env:
      FORMCALC_VERSION: '9.9'
      MODELS: 'CMSSM SM'
      # CMSSMCKM MSSMCPV MSSMNoFV NUHMSSMNoFVHimalaya ScalarLeptoquarks LRLR E6SSM SM THDMII MRSSM2 MRSSM2CKM'

    steps:

      # action checks-out our repository directly under $GITHUB_WORKSPACE
      - name: Checkout
        uses: actions/checkout@v2

      - name: Activate Wolfram Engine
        env:
          MY_MATH_PASS:    ${{ secrets.MY_MATH_PASS }}
          MY_MAIL_ADDRESS: ${{ secrets.MY_MAIL_ADDRESS }}
        run: |
          wolframscript << EOF
          $MY_MAIL_ADDRESS
          $MY_MATH_PASS
          EOF
          printf "Checking if wolframscript command is workings... "; if [ $(wolframscript -code 1+2) -eq 3 ]; then echo OK; else echo fail && exit 1; fi
          printf "Checking if math command is workings... "; if [[ $(math -run "Print[7 673, $SystemID]; Exit[]" < /dev/null) =~ 4711([^$"\r\n"]*) ]]; then echo OK; else echo fail && exit 1; fi

      - name: Install FormCalc
        run: |
          cd /fs_dependencies/gcc
          wget -q -O - http://www.feynarts.de/formcalc/FormCalc-$FORMCALC_VERSION.tar.gz | tar xzf -
          cd FormCalc-$FORMCALC_VERSION
          ./compile
          echo "AppendTo[\$Path, \"/fs_dependencies/gcc/FormCalc-$FORMCALC_VERSION\"];" >> /root/.WolframEngine/Kernel/init.m

      - name: Create models
        env:
          PART: ${{ matrix.PART }}
        run: |
          models=$(ruby -e "puts ARGV.each_slice(ARGV.length/2).to_a[$PART-1].join(' ')" -- $MODELS)
          for m in $models; do ./createmodel --name=$m; done

      - name: Set C++ environment
        env:
          COMPILER: ${{ matrix.COMPILER }}
        run: |
          # icpc doesn't support -Wpedantic
          case "$COMPILER" in
            "gcc")    echo "CXX=g++"     >> $GITHUB_ENV; echo "FC=gfortran" >> $GITHUB_ENV; echo "CXXFLAGS=-std=c++14 -O2 -fPIC -Wall -Wpedantic -pipe"           >> $GITHUB_ENV ;;
            "clang")  echo "CXX=clang++" >> $GITHUB_ENV; echo "FC=gfortran" >> $GITHUB_ENV; echo "CXXFLAGS=-std=c++14 -O2 -fPIC -Wall -Wpedantic -pipe"           >> $GITHUB_ENV ;;
            "intel")  echo "CXX=icpc"    >> $GITHUB_ENV; echo "FC=ifort"    >> $GITHUB_ENV; echo "CXXFLAGS=-std=c++14 -O2 -fPIC -Wall -pipe -fp-model precise"    >> $GITHUB_ENV ;;
            *) exit 1 ;;
          esac

      - name: Configure
        env:
          COMPILER: ${{ matrix.COMPILER }}
          PART:        ${{ matrix.PART }}
        run: |
          models=$(ruby -e "puts ARGV.each_slice(ARGV.length/2).to_a[$PART-1].join(',')" -- $MODELS)
          [[ "$COMPILER" = "intel" ]] && source /opt/intel/oneapi/setvars.sh
          ./configure \
            --with-cxx=$CXX \
            --with-shared-lib-cmd="$CXX -fp-model strict -shared -o" \
            --with-fc=$FC \
            --with-models=$models \
            --with-loop-libraries=collier,looptools \
            --with-looptools-incdir=/fs_dependencies/$COMPILER/LoopTools/include \
            --with-looptools-libdir=/fs_dependencies/$COMPILER/LoopTools/lib64 \
            --with-collier-incdir=/fs_dependencies/$([ "$COMPILER" = "clang" ] && echo "gcc" || echo "$COMPILER")/COLLIER/include \
            --with-collier-libdir=/fs_dependencies/$([ "$COMPILER" = "clang" ] && echo "gcc" || echo "$COMPILER")/COLLIER/lib \
            --enable-himalaya \
            --with-himalaya-incdir=/fs_dependencies/$COMPILER/Himalaya/include \
            --with-himalaya-libdir=/fs_dependencies/$COMPILER/Himalaya/lib64 \
            --enable-gm2calc \
            --with-gm2calc-incdir=/fs_dependencies/$COMPILER/GM2Calc/include \
            --with-gm2calc-libdir=/fs_dependencies/$COMPILER/GM2Calc/lib64 \
            --with-tsil-incdir=/fs_dependencies/$COMPILER/tsil \
            --with-tsil-libdir=/fs_dependencies/$COMPILER/tsil \
            --with-optional-modules=test \
            --enable-librarylink \
            --with-cxxflags="$CXXFLAGS"
          make showbuild

      - name: Make
        run: |
          [[ "$CXX" = "icpc" ]] && source /opt/intel/oneapi/setvars.sh
          make -j2

      - name: Run Mathematica tests
        run: |
          # some mathematica tests do compile something
          [[ "$CXX" = "icpc" ]] && source /opt/intel/oneapi/setvars.sh
          # make -j2 execute-meta-tests

      - name: Build compiled tests
        run: |
          [[ "$CXX" = "icpc" ]] && source /opt/intel/oneapi/setvars.sh
          make -j2 alltest

      # Having a single name entry and a bash loop over integers in the run tag would save a
      # little writing but splitting it into multiple entries makes it easier to see on github which loop
      # library has failed
      - name: Run compiled and shell script (Softsusy)
        # Makefile doesn't know about FLEXIBLESUSY_LOOP_LIBRARY flag so tests are not
        # re-run on FLEXIBLESUSY_LOOP_LIBRARY change. Every run must clean logs after itself.
        run: |
          [[ "$CXX" = "icpc" ]] && source /opt/intel/oneapi/setvars.sh
          FLEXIBLESUSY_LOOP_LIBRARY=0 make -j2 execute-compiled-tests execute-shell-tests
          make clean-test-log

      - name: Run compiled and shell script (Collier)
        run: |
          [[ "$CXX" = "icpc" ]] && source /opt/intel/oneapi/setvars.sh
          FLEXIBLESUSY_LOOP_LIBRARY=1 make -j2 execute-compiled-tests execute-shell-tests
          make clean-test-log

      - name: Run compiled and shell script (LoopTools)
        run: |
          [[ "$CXX" = "icpc" ]] && source /opt/intel/oneapi/setvars.sh
          FLEXIBLESUSY_LOOP_LIBRARY=2 make -j2 execute-compiled-tests execute-shell-tests
          make clean-test-log

      - name: Run compiled and shell script (fflite)
        run: |
          [[ "$CXX" = "icpc" ]] && source /opt/intel/oneapi/setvars.sh
          FLEXIBLESUSY_LOOP_LIBRARY=3 make -j2 execute-compiled-tests execute-shell-tests
          make clean-test-log

      - name: Testing pack-SM-src
        if: ${{ matrix.PART == 2 }}
        env:
          COMPILER: ${{ matrix.COMPILER }}
        run: |
          make pack-SM-src
          rm -rf models/SM
          tar -xf SM.tar.gz
          [[ "$COMPILER" = "intel" ]] && source /opt/intel/oneapi/setvars.sh
          ./configure \
            --with-cxx=$CXX \
            --with-fc=$FC \
            --with-models=SM \
            --with-loop-libraries=collier,looptools \
            --with-looptools-incdir=/fs_dependencies/$COMPILER/LoopTools/include \
            --with-looptools-libdir=/fs_dependencies/$COMPILER/LoopTools/lib64 \
            --with-collier-incdir=/fs_dependencies/$([ "$COMPILER" = "clang" ] && echo "gcc" || echo "$COMPILER")/COLLIER/include \
            --with-collier-libdir=/fs_dependencies/$([ "$COMPILER" = "clang" ] && echo "gcc" || echo "$COMPILER")/COLLIER/lib \
            --disable-meta \
            --with-optional-modules=test \
            --with-cxxflags="$CXXFLAGS"
          make -j2
          make -j2 execute-meta-tests
          make -j2 alltest
          for i in {0..3}
          do
            FLEXIBLESUSY_LOOP_LIBRARY=$i make -j2 execute-compiled-tests execute-shell-tests
            make clean-test-log
          done

      - name: (Optional) Save logs in case of an error
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: ${{matrix.COMPILER}}_test-logs
          path: |
            config.*
            test/test_*.log

