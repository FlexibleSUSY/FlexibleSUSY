(* :Copyright:

   ====================================================================
   This file is part of FlexibleSUSY.

   FlexibleSUSY is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation, either version 3 of the License,
   or (at your option) any later version.

   FlexibleSUSY is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with FlexibleSUSY.  If not, see
   <http://www.gnu.org/licenses/>.
   ====================================================================

*)

(*INITIALIZATION***************************************************************)
Global`time = AbsoluteTime[];
Get@"utils/load-FlexibleSUSY.m";

Start@"MRSSM";

modelFile = FileNameJoin@{Directory[], "models", "MRSSM2", "FlexibleSUSY.m"};

FlexibleSUSY`LoadModelFile@modelFile;
FlexibleSUSY`Private`PrepareUnrotatedParticles@FSEigenstates;
allParameters = FlexibleSUSY`SetupModelParameters@@FlexibleSUSY`ReadSARAHBetaFunctions[];

{massMatrices, Lat$massMatrices} = FlexibleSUSY`SetupMassMatrices@allParameters;
FlexibleSUSY`SetupOutputParameters@massMatrices;

(*FFMassiveVFormFactors********************************************************)
Needs["FFMassiveVFormFactors`",FileNameJoin@{Directory[],"test","FFMassiveVFormFactors.meta"}];

WriteString[OutputStream["stdout",1],"Calculation of V indices started ..."];
massiveVIndices = Utils`StringJoinWithSeparator[FFMassiveVFormFactors`MassiveVIndices /@
   Select[GetVectorBosons[], !(IsMassless[#] || IsElectricallyCharged[#])&],"\n"];
Print[" done"];

extParticles = {{Fe -> Fe, VZ}};
WriteString[OutputStream["stdout",1],"Calculation of vertices started ..."];
insertionsAndVertices = FlattenAt[#,1]&/@Transpose[{extParticles,SARAH`ff@@@extParticles}];
Print[" done"];

verticesMassive = Flatten[insertionsAndVertices[[All, 3]][[All, All, 2]][[All, All, 2]], 2];

WriteString[OutputStream["stdout",1],"Calculation of interface started ..."];
{prototypesMassive, definitionsMassive} =
   StringJoin/@Transpose[FFMassiveVFormFactors`FFMassiveVFormFactorsCreateInterface@@@insertionsAndVertices];
Print[" done"];

(*WriteLToLConversionClass********************************************)
leptonPairs = {{Fe -> Fe, Au}};

massiveNeutralVectorBosons =
   Select[GetVectorBosons[], !(TreeMasses`IsMassless[#] || TreeMasses`IsElectricallyCharged[#])& ];
masslessNeutralVectorBosons =
   Select[GetVectorBosons[], (TreeMasses`IsMassless[#] && !TreeMasses`IsElectricallyCharged[#] && !TreeMasses`ColorChargedQ[#])& ];
(* drop nucleon, convert rule to list (so {Fe -> Fe, Au} into {Fe,Fe} *)
externalFermions = DeleteDuplicates@Flatten[
   {TreeMasses`GetSMQuarks[], Drop[leptonPairs, None, -1] /. Rule[a_, b_] :> Sequence[a, b]} ];
verticesConversion = Flatten /@ Tuples[
   {{CXXDiagrams`LorentzConjugate[#], #}& /@ externalFermions,
   Join[masslessNeutralVectorBosons, massiveNeutralVectorBosons]}];

processesUnderInterest = DeleteDuplicates@Transpose[Drop[Transpose@leptonPairs, -1]];

Needs@"NPointFunctions`";
Needs@"WilsonCoeffs`";

{npfVertices,npfHeaders,npfCode} = Module[
   {
      nameForUpQuarkClass = "zpinguins_uFeFe_1loop",
      nameForDownQuarkClass  = "zpinguins_dFeFe_1loop",
      header,uNPF,dNPF,
      dim6,fields,
      codeU,codeD,
      dressedU,dressedD,assumptionReplacements
   },
   header=NPointFunctions`CreateCXXHeaders[];
   sp[particle_,num_] := SARAH`DiracSpinor[#,mom@num,mass@#] &@ particle@{Symbol["SARAH`gt"<>ToString@num]};

   Print["Analytical calculation for Fe->Fe started ..."];
   {uNPF, dNPF} = NPointFunctions`NPointFunction[{Fe,#},{Fe,#},
      NPointFunctions`LoopLevel -> 1,
      NPointFunctions`Regularize -> FlexibleSUSY`FSRenormalizationScheme,
      NPointFunctions`OnShellFlag -> True,
      NPointFunctions`UseCache -> False,
      NPointFunctions`ZeroExternalMomenta -> NPointFunctions`ExceptLoops,
      NPointFunctions`KeepProcesses -> {Vectors},
      NPointFunctions`Observable -> FlexibleSUSYObservable`LToLConversion[]] &/@
         {Fu, Fd};
   dressedU = Flatten@NPointFunctions`GetProcess@uNPF;
   dressedD = Flatten@NPointFunctions`GetProcess@dNPF;
   assumptionReplacements =
      {  SARAH`sum[__] -> 0,
         LoopTools`B0i[i_, _, mm__] :> LoopTools`B0i[i, 0, mm],
         LoopTools`C0i[i_, Repeated[_, {3}], mm__] :>
            LoopTools`C0i[i, Sequence@@Array[0&, 3], mm]};
   {uNPF,dNPF} = {uNPF,dNPF} /. assumptionReplacements;

   Print["Analytical calculation for Fe->Fe done."];
   fields[SARAH`UpQuark] = Flatten@NPointFunctions`GetProcess@uNPF;
   fields[SARAH`DownQuark] = Flatten@NPointFunctions`GetProcess@dNPF;
   dim6[q_] := Module[{sp, dc, l = SARAH`Lorentz, R = 6, L = 7},
      sp[f_, n_] := SARAH`DiracSpinor[fields[f][[n]], 0, 0];
      dc[a_, b__, c_] := NPointFunctions`DiracChain[sp[q, a], b, sp[q, c]];
      {  "S_LL" -> dc[3,L,1] dc[4,L,2],
         "S_LR" -> dc[3,L,1] dc[4,R,2],
         "S_RL" -> dc[3,R,1] dc[4,L,2],
         "S_RR" -> dc[3,R,1] dc[4,R,2],
         "V_LL" -> dc[3,R,l@1,1] dc[4,R,l@1,2],
         "V_LR" -> dc[3,R,l@1,1] dc[4,L,l@1,2],
         "V_RL" -> dc[3,L,l@1,1] dc[4,R,l@1,2],
         "V_RR" -> dc[3,L,l@1,1] dc[4,L,l@1,2],
         "T_LL" -> dc[3,-L,l@1,l@2,1] dc[4,-L,l@1,l@2,2],
         "T_RR" -> dc[3,-R,l@1,l@2,1] dc[4,-R,l@1,l@2,2]}];
   uNPF = uNPF~WilsonCoeffs`InterfaceToMatching~dim6@Fu;
   dNPF = dNPF~WilsonCoeffs`InterfaceToMatching~dim6@Fd;

   Print["C++ code calculation for Fe->Fe started ..."];
   codeU = NPointFunctions`CreateCXXFunctions[uNPF,
      nameForUpQuarkClass,
      SARAH`Delta,
      dim6@Fu ][[2]];
   codeD = NPointFunctions`CreateCXXFunctions[dNPF,
      nameForDownQuarkClass,
      SARAH`Delta,
      dim6@Fd ][[2]];
   Print["C++ code calculation for Fe->Fe done."];
   {
      DeleteDuplicates@Join[NPointFunctions`VerticesForNPointFunction@uNPF,
         NPointFunctions`VerticesForNPointFunction@dNPF],
      header,
      codeU<>"\n\n"<>codeD
   }
];

(*VERTICES*********************************************************************)
(*if some additional vetices exist, then get them*)
existedVerticesFile = FileNameJoin@{
   SARAH`$sarahCurrentOutputMainDir,
   ToString@FlexibleSUSY`FSEigenstates,
   "CXXDiagrams",
   "CreatedVertices.m"};

existedVertices = If[TrueQ@FileExistsQ@existedVerticesFile,
   Get@existedVerticesFile, {}];

(*get vertices which doesn't exist yet*)
newVertices = Complement[
   DeleteDuplicates@Join[verticesMassive,verticesConversion,npfVertices],
   existedVertices];

If[newVertices==={},
   verticesCode = {"",""},
   (* else *)
   verticesCode = CXXDiagrams`CreateVertices[
   newVertices,
   CXXdiagrams`MaximumVerticesLimit -> Length@newVertices][[1]]
];

(*CODE REPLACEMENTS************************************************************)
WriteOut`ReplaceInFiles[
   {
      {
         FileNameJoin@{Directory[], "test", "test_MRSSM2_FFMassiveV_form_factors.hpp.in"},
         FileNameJoin@{Directory[], "test", "test_MRSSM2_FFMassiveV_form_factors.hpp"}
      }
   },
   {
      "@FFMassiveVFormFactors_InterfacePrototypes@" -> prototypesMassive,
      "@FFMassiveVFormFactors_InterfaceDefinitions@" -> definitionsMassive,
      "@FFMassiveVFormFactors_VIndices@" ->  massiveVIndices,
      "@ModelName@" -> FlexibleSUSY`FSModelName
   }
];

templateCode = StringJoin@Riffle[Utils`ReadLinesInFile[
   FileNameJoin@{Directory[], "test", "test_MRSSM2_l_to_l_conversion.cpp.in"}],
   "\n"];
code = StringReplace[templateCode,
   {
      "@npf_headers@" -> npfHeaders,
      "@npf_definitions@" -> npfCode,
      "@CXXDiagrams_VertexPrototypes@" -> verticesCode[[1]],
      "@CXXDiagrams_VertexDefinitions@" -> verticesCode[[2]]
   }
];

fileHandle = OpenWrite@FileNameJoin@{Directory[], "test", "test_MRSSM2_l_to_l_conversion.cpp"};
fileHandle ~ WriteString ~ code;
Close@fileHandle;
WriteString[OutputStream["stdout",1],#]&@StringJoin[
   "\033[1;36m>>test>>\033[1;0m test_MRSSM2_l_to_l_conversion.meta \033[1;32mdone\033[1;0m in ",
   ToString@N[AbsoluteTime[]-Global`time,{Infinity,3}],
   " seconds.\n"
];
