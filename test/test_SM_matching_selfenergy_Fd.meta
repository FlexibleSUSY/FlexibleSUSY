(* :Copyright:

   ====================================================================
   This file is part of FlexibleSUSY.

   FlexibleSUSY is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation, either version 3 of the License,
   or (at your option) any later version.

   FlexibleSUSY is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with FlexibleSUSY.  If not, see
   <http://www.gnu.org/licenses/>.
   ====================================================================

*)

Print["Comparing self-energy expressions of Fd generated by NPointFunctions to those from FlexibleSUSY ... "];

Needs["SARAH`"];
Needs["FlexibleSUSY`"];
Needs["Utils`"];

workingDirectory = Directory[];
SARAH`SARAH[OutputDirectory] = FileNameJoin[{workingDirectory, "Output"}];
SARAH`SARAH[InputDirectories] = {
    FileNameJoin[{workingDirectory, "sarah"}],
    ToFileName[{$sarahDir, "Models"}]
};

Start["SM"];

modelFile = FileNameJoin[{workingDirectory, "models", "SM", "FlexibleSUSY.m"}];

FlexibleSUSY`LoadModelFile[modelFile];
{susyBetaFunctions, susyBreakingBetaFunctions} = FlexibleSUSY`ReadSARAHBetaFunctions[];
allParameters = FlexibleSUSY`SetupModelParameters[susyBetaFunctions, susyBreakingBetaFunctions];

{massMatrices, Lat$massMatrices} = FlexibleSUSY`SetupMassMatrices[allParameters];
FlexibleSUSY`SetupOutputParameters[massMatrices];

templateCode = StringJoin @ Riffle[Utils`ReadLinesInFile[
		FileNameJoin[{workingDirectory, "test", "test_SM_matching_selfenergy_Fd.cpp.in"}]],
	"\n"];

Selfenergy = NPointFunctions`NPointFunction[
	{SARAH`DownQuark}, {SARAH`DownQuark},
    NPointFunctions`UseCache -> False,
	NPointFunctions`ZeroExternalMomenta -> True,
    NPointFunctions`ExcludedTopologies -> NPointFunctions`OneParticleReducible];

ChiralBasis = {{"value_right",
  FormCalc`DiracChain[FormCalc`Spinor[Mom[1], 0, -1], 6, FormCalc`Spinor[Mom[2], 0, -1]]},
  {"value_left", FormCalc`DiracChain[FormCalc`Spinor[Mom[1], 0, -1], 7, 
     FormCalc`Spinor[Mom[2], 0, -1]]}};

FdSelfenergy = WilsonCoeffs`InterfaceToMatching[Selfenergy, ChiralBasis];

FdSelfenergyCode = NPointFunctions`CreateCXXFunctions[
	{FdSelfenergy}, {"selfenergy_Fd_1loop"}, {SARAH`Delta[ct1, ct2]}, fermionBasis -> ChiralBasis[[All, 1]]][[2]];
nPointFunctionHeaders = CreateCXXHeaders[UseWilsonCoeffs -> True];

FdSelfenergyVertices = VerticesForNPointFunction[FdSelfenergy];

cxxDiagramsDir = FileNameJoin[{SARAH`$sarahCurrentOutputMainDir,
	ToString[FlexibleSUSY`FSEigenstates], "CXXDiagrams"}];
createdVerticesFile = FileNameJoin[{cxxDiagramsDir, "CreatedVertices.m"}];
    
createdVertices = If[FileExistsQ[createdVerticesFile] === True,
	Get[createdVerticesFile], {}];

nPointFunctionVertices = DeleteDuplicates[Join[FdSelfenergyVertices]];
remainingVertices = Complement[nPointFunctionVertices, createdVertices];

verticesCode = CXXDiagrams`CreateVertices[remainingVertices,
	CXXdiagrams`MaximumVerticesLimit -> Length[remainingVertices]][[1]];

code = StringReplace[templateCode, {
	"@NPointFunctions_Selfenergy_Fd_1loop@" -> FdSelfenergyCode,
	"@NPointFunctions_Headers@" -> nPointFunctionHeaders,
	"@CXXDiagrams_VertexPrototypes@" -> verticesCode[[1]],
	"@CXXDiagrams_VertexDefinitions@" -> verticesCode[[2]]
}];

fileHandle = OpenWrite[FileNameJoin[{workingDirectory, "test", "test_SM_matching_selfenergy_Fd.cpp"}]];
WriteString[fileHandle, code];
Close[fileHandle];
