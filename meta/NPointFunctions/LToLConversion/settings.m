(* ::Package:: *)

(* :Copyright:

   ====================================================================
   This file is part of FlexibleSUSY.

   FlexibleSUSY is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published
   by the Free Software Foundation, either version 3 of the License,
   or (at your option) any later version.

   FlexibleSUSY is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with FlexibleSUSY.  If not, see
   <http://www.gnu.org/licenses/>.
   ====================================================================

*)

(* @todo topology.m should be pre-loaded *)

BeginPackage["NPointFunctions`"];
Begin["NPointFunctions`internal`"];

`settings`topologyReplacements::usage = "
@brief A set of rules for exclude topologies routines used inside
       FeynArts`CreateTopologies.";
`settings`topologyReplacements =
{
   FourFermionMassiveVectorPenguins -> (`topologyQ`pinguinT@#&),
   FourFermionScalarPenguins -> (`topologyQ`pinguinT@#&),
   FourFermionFlavourChangingBoxes -> (`topologyQ`box@#&)
};
`settings`topologyReplacements ~ SetAttributes ~ {Protected, Locked};

`settings`diagrams::usage = "
@brief A function, which becomes a set of settings, after acting on set of
       diagrams, generated by FeynArts`InsertFields. Allows to remove/simplify
       this set. The structure is the following: `List' of `Rule's, each of them
       is a `keepProcesses' element on lhs, and the `List' of two elements on
       the rhs. The first one represents the set of actions, which should be
       performed in the case, when `keepProcesses' contains lhs element, while
       the second one - the set of actions for the absence of the lhs element.
       Each of these elements has four entries: 1) a topologyQ function, 2) a
       two-argument function, which acts on generic level of insertions and
       the expression, which is used for the selection criteria, 3) a selection
       criteria, appropriate for the used two-argument function, 4) a `String'
       message to be printed after the application of the rule.
@param ds A set of diagrams, generated by FeynArts`InsertFields.
@returns A set of settings.";
`settings`diagrams = Function[ds,
{
   FourFermionMassiveVectorPenguins -> {
      {
         {
            `topologyQ`self1pinguinT,
            removeGenericInsertionsBy,
            FeynArts`Field[7|8] -> getField[ds,1] /. i:`type`indexGen:>Blank[],
            "t-penguins: remove leptons in initial SED loop"
         },
         {
            `topologyQ`self1pinguinT,
            FeynArts`DiagramSelect,
            FreeQ[#,FeynArts`Field[7|8] -> FeynArts`V]&,
            "t-penguins: remove vector bosons in initial SED loop"
         },
         {
            `topologyQ`self3pinguinT,
            removeGenericInsertionsBy,
            FeynArts`Field[7|8] -> getField[ds,3] /. i:`type`indexGen:>Blank[],
            "t-penguins: remove leptons in final SED loop"
         },
         {
            `topologyQ`self3pinguinT,
            FeynArts`DiagramSelect,
            FreeQ[#,FeynArts`Field[7|8] -> FeynArts`V]&,
            "t-penguins: remove vector bosons in final SED loop"
         },
         {
           `topologyQ`trianglepinguinT,
            removeGenericInsertionsBy,
            FeynArts`Field[6|7] -> getField[ds,1] /. i:`type`indexGen:>Blank[],
            "t-penguins: remove leptons in triangle loop"
         },
         {
           `topologyQ`trianglepinguinT,
            FeynArts`DiagramSelect,
            FreeQ[#, FeynArts`Field[6|7|8] -> FeynArts`V]&,
            "t-penguins: remove vector bosons in triangle loop"
         }
      },
      {
         {
            `topologyQ`pinguinT,
            FeynArts`DiagramSelect,
            FreeQ[#,FeynArts`Field@5 -> FeynArts`V]&,
            "t-penguins: remove tree-like vector bosons"
         }
      }
   },
   FourFermionScalarPenguins -> {
      {
         {
            `topologyQ`self1pinguinT,
            removeGenericInsertionsBy,
            FeynArts`Field[7|8] -> getField[ds,1] /. i:`type`indexGen:>Blank[],
            "t-penguins: remove leptons in initial SED loop"
         },
         {
            `topologyQ`self1pinguinT,
            FeynArts`DiagramSelect,
            FreeQ[#,FeynArts`Field[7|8] -> FeynArts`V]&,
            "t-penguins: remove vector bosons in initial SED loop"
         },
         {
            `topologyQ`self3pinguinT,
            removeGenericInsertionsBy,
            FeynArts`Field[7|8] -> getField[ds,3] /. i:`type`indexGen:>Blank[],
            "t-penguins: remove leptons in final SED loop"
         },
         {
            `topologyQ`self3pinguinT,
            FeynArts`DiagramSelect,
            FreeQ[#,FeynArts`Field[7|8] -> FeynArts`V]&,
            "t-penguins: remove vector bosons in final SED loop"
         },
         {
           `topologyQ`trianglepinguinT,
            removeGenericInsertionsBy,
            FeynArts`Field[6|7] -> getField[ds,1] /. i:`type`indexGen:>Blank[],
            "t-penguins: remove leptons in triangle loop"
         },
         {
           `topologyQ`trianglepinguinT,
            FeynArts`DiagramSelect,
            FreeQ[#, FeynArts`Field[6|7|8] -> FeynArts`V]&,
            "t-penguins: remove vector bosons in triangle loop"
         }
      },
      {
         {
            `topologyQ`pinguinT,
            FeynArts`DiagramSelect,
            FreeQ[#,FeynArts`Field@5 -> FeynArts`S]&,
            "t-penguins: remove tree-like scalar bosons"
         }
      }
   },
   FourFermionFlavourChangingBoxes -> {
      {
         {
            `topologyQ`boxS,
            removeGenericInsertionsBy,
            FeynArts`Field[6] -> getField[ds,1] /. i:`type`indexGen:>Blank[],
            "s-boxes: remove loops with initial lepton"
         },
         {
            `topologyQ`boxS,
            FeynArts`DiagramSelect,
            FreeQ[#, FeynArts`Field[5|6|7|8] -> FeynArts`V]&,
            "s-boxes: remove loops with vector bosons"
         },
         {
            `topologyQ`boxU,
            removeGenericInsertionsBy,
            FeynArts`Field[5] -> getField[ds,1] /. i:`type`indexGen:>Blank[],
            "u-boxes: remove loops with initial lepton"
         },
         {
            `topologyQ`boxU,
            FeynArts`DiagramSelect,
            FreeQ[#, FeynArts`Field[5|6|7|8] -> FeynArts`V]&,
            "u-boxes: remove loops with vector bosons"
         }
      },
      {}
   }
}
];
`settings`diagrams ~ SetAttributes ~ {Protected, Locked};

End[];
EndPackage[];
