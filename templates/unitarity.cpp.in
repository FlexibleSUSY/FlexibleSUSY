// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================


/**
 * @file @ModelName@_unitarity.cpp
 *
 * This file was generated with FlexibleSUSY @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#include "@ModelName@_unitarity.hpp"
#include "@ModelName@_mass_eigenstates.hpp"
#include "cxx_qft/@ModelName@_fields.hpp"

#include "sum.hpp"
#include "wrappers.hpp"

#include <Eigen/SparseCore>

namespace flexiblesusy {
namespace @ModelName@_unitarity {

static constexpr int size = @scatteringPairsLength@;

inline double Sqrt2(int i, int j) {
   // 1/Sqrt[2] or 1
   return i==j ? 0.707106781186547524 : 1;
}

// s -> infinity limit
double max_scattering_eigenvalue_infinite_s(const @ModelName@_mass_eigenstates& model) {
   Eigen::SparseMatrix<double> matrix(size, size);

   using namespace @ModelName@_cxx_diagrams::fields;

@infiniteSMatrix@
   matrix.makeCompressed();
   return matrix.coeffs().maxCoeff();
}

} // namespace @ModelName@_unitarity
} // namespace flexiblesusy
