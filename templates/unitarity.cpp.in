// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================


/**
 * @file @ModelName@_unitarity.cpp
 *
 * This file was generated with FlexibleSUSY @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#include "@ModelName@_unitarity.hpp"
#include "@ModelName@_mass_eigenstates.hpp"
#include "@ModelName@_context_base.hpp"

#include "minimizer.hpp"
#include "wrappers.hpp"

#include <gsl/gsl_min.h>
#include <algorithm>
#include <array>
#include <functional>

namespace flexiblesusy {
namespace @ModelName@_unitarity {

double max_scattering_eigenvalue(const @ModelName@_mass_eigenstates& model) {
   constexpr size_t size = @scatteringPairsLength@;
   std::array<std::array<std::function<double(double, int, int, int, int)>, size>, size> matrix = {};
   std::array<std::function<double(double)>, size> row_temp = {};
   const double sChan = 1.;
   const double tChan = 1.;
   const double uChan = 1.;
   const double qChan = 1.;

   using namespace @ModelName@_cxx_diagrams::fields;

@scatteringElements@
   std::array<std::array<double, size>, size> max_eigenvalues = {};

   for (int i=0; i<size; i++) {
      for (int j=i; j<size; j++) {
         @skipZeros@
         // @todo: loop over cartesian product of all external state indices
         // getting a single vector of all maximal scattering values
         // select the biggest one
         std::function<double(double)> f = std::bind(matrix[i][j], std::placeholders::_1, -1, -1, -1, -1);

         int status;
         int iter = 0, max_iter = 100;
         const gsl_min_fminimizer_type *T;
         gsl_min_fminimizer *s;
         double a = 100.0, b = 5000.0;
         double m = 0.5*(b+a);
         gsl_function F = {
            [](double d, void* vf) -> double {
               auto& f = *static_cast<std::function<double(double)>*>(vf);
               return -std::abs(f(d));
            },
            &f
         };
         T = gsl_min_fminimizer_brent;
         s = gsl_min_fminimizer_alloc (T);
         gsl_min_fminimizer_set (s, &F, m, a, b);

         printf ("using %s method\n",
            gsl_min_fminimizer_name (s));

         printf ("%5s [%9s, %9s] %9s %10s %9s\n",
            "iter", "lower", "upper", "min",
            "err", "err(est)");

         printf ("%5d [%.7f, %.7f] %.7f %.7f\n",
            iter, a, b,
            m, b - a);

         do
         {
           iter++;
           status = gsl_min_fminimizer_iterate (s);

           m = gsl_min_fminimizer_x_minimum (s);
           a = gsl_min_fminimizer_x_lower (s);
           b = gsl_min_fminimizer_x_upper (s);

          status
             = gsl_min_test_interval (a, b, 0.001, 0.0);

          if (status == GSL_SUCCESS)
             printf ("Converged:\n");

             printf ("%5d [%.7f, %.7f] "
                "%.7f %.7f\n",
                iter, a, b,
                m, b - a);
         }
         while (status == GSL_CONTINUE && iter < max_iter);
         max_eigenvalues[i][j] = f(m);

         gsl_min_fminimizer_free (s);
      }
   }
   for (int i=0; i<size; i++) {
      for (int j=i; j<size; j++) {
         std::cout << max_eigenvalues[i][j] << std::endl;
      }
   }
}

} // namespace @ModelName@_unitarity
} // namespace flexiblesusy
