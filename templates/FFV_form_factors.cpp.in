// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

/**
 * @file @ModelName@_FFV_form_factors.cpp
 *
 * This file was generated with FlexibleSUSY @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#include <complex>
#include <valarray>

#include "@ModelName@_mass_eigenstates.hpp"
#include "concatenate.hpp"
#include "cxx_qft/@ModelName@_qft.hpp"

#include "dilog.hpp"
#include "wrappers.hpp"

using namespace flexiblesusy;
using namespace @ModelName@_cxx_diagrams;
using namespace @ModelName@_cxx_diagrams::fields;

namespace {

static constexpr double oneOver32PiSqr = 0.5*oneOver16PiSqr;

/**
 * @class FFV_SSF
 * @brief A template that calculate contributions to the FFV form
 *        factors of a given particles in a one loop diagram
 *        specified by a vector emitters and an exchange particle.
 * @tparam Args Specifies in order the field of which to
 *              calculate the electric dipole moment,
 *              the photon emitter and the exchange particle
 *              in a one-loop diagram where the photon emitter
 *              is a scalar and the exchange particle a fermion.
 *
 * This template evaluates the contribution to the electric
 * dipole moment of a one loop diagram with fields given by
 * \a Args.
 */
template <class Fj, class Fi, class V, class S1, class S2, class F>
struct FFV_SSF {
   static std::valarray<std::complex<double>>
   value(const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
         context_base const& context,
         bool discard_SM_contributions);
};

/**
* @class FFV_FFS
* @brief A template that calculate contributions to the FFV form
*        factors of a given particle in a one loop diagram
*        specified by a vector emitters and an exchange particle.
* @tparam Args Specifies in order the field of which to
*              calculate the electric dipole moment,
*              the photon emitter and the exchange particle
*              in a one-loop diagram where the photon emitter
*              is a fermion and the exchange particle a scalar.
*
* This template evaluates the contribution to the electric
* dipole moment of a one loop diagram with fields given by
* \a Args.
*/
template <class Fj, class Fi, class V, class F1, class F2, class S>
struct FFV_FFS {
   static std::valarray<std::complex<double>>
   value(const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
         context_base const& context,
         bool discard_SM_contributions);
};

/**
 * @class FFV_VVF
 * @brief A template that calculates contributions to the FFV form
 *          factors of a given particle in a one loop diagram
 *          specified by a vector emitter and an exchange particle.
 * @tparam Args Specifies in order the field of which to
 *              calculate the electric dipole moment, 
 *              the photon emitter and the exchange particle 
 *              in a one-loop diagram where the photon emitter 
 *              is a vector and the exchange particle a fermion.
 *
 * This template evaluates the contribution to the electric
 * dipole moment of a one loop diagram with fields given by
 * \a Args.
 */
template <class Fj, class Fi, class P, class V1, class V2, class F>
struct FFV_VVF {
    static std::valarray<std::complex<double>>
    value(const typename field_indices<Fj>::type& indices_in,
          const typename field_indices<Fi>::type& indices_out,
          context_base const& context,
          bool discard_SM_contributions);
};

/**
 * @class FFV_FFV
 * @brief A template that calculates contributions to the FFV form
 *        factors of a given particle in a one loop diagram
 *        specified by a vector emitter and an exchange particle.
 * @tparam Args Specifies in order the field of which to
 *              calculate the electric dipole moment,
 *              the photon emitter and the exchange particle
 *              in a one-loop diagram where the photon emitter
 *              is a fermion and the exchange particle a vector.
 *
 * This template evaluates the contribution to the electric
 * dipole moment of a one loop diagram with fields given by
 * \a Args.
 */
template <class Fj, class Fi, class P, class F1, class F2, class V>
struct FFV_FFV {
    static std::valarray<std::complex<double>>
    value(const typename field_indices<Fj>::type& indices_in,
          const typename field_indices<Fi>::type& indices_out,
          context_base const& context,
          bool discard_SM_contributions);
};

/**
 * @class FFV_VGF
 * @brief A template that calculates contributions to the FFV form
 *        factors of a given particle in a one loop diagram
 *        specified by a vector emitter and an exchange particle.
 * @tparam Args Specifies in order the field of which to
 *         calculate the electric dipole moment,
 *         the photon emitter and the exchange particle
 *         in a one-loop diagram where the photon is emitted
 *         from a vector-goldstone vertex and the exchange
 *         particle is a fermion.
 *
 * This template evaluates the contribution to the electric
 * dipole moment of a one loop diagram with fields given by
 * \a Args.
 */
template <class Fj, class Fi, class P, class V1, class G2, class F>
struct FFV_VSF {
    static std::valarray<std::complex<double>>
    value(const typename field_indices<Fj>::type& indices_in,
          const typename field_indices<Fi>::type& indices_out,
          context_base const& context,
          bool discard_SM_contributions);
};

/**
 * @class FFV_GVF
 * @brief A template that calculates contributions to the FFV form
 *        factors of a given particle in a one loop diagram
 *        specified by a vector emitter and an exchange particle.
 * @tparam Args Specifies in order the field of which to
 *              calculate the electric dipole moment,
 *              the photon emitter and the exchange particle
 *              in a one-loop diagram where the photon is emitted
 *              from a goldstone-vector vertex and the exchange
 *              particle is a fermion.
 *
 * This template evaluates the contribution to the electric
 * dipole moment of a one loop diagram with fields given by
 * \a Args.
 */
template <class Fj, class Fi, class P, class G1, class V2, class F>
struct FFV_SVF {
    static std::valarray<std::complex<double>>
    value(const typename field_indices<Fj>::type& indices_in,
          const typename field_indices<Fi>::type& indices_out,
          context_base const& context,
          bool discard_SM_contributions);
};

} // anonymous namespace

namespace flexiblesusy {
namespace @ModelName@_FFV_form_factors {
@FFVFormFactors_InterfaceDefinitions@
}
} // namespace flexiblesusy

namespace {
/**
* @defgroup LoopFunctions Loop functions
* @brief The loop functions necessary for the Fe_I -> Fe_J gamma one-loop calculations.
*
* These are OneLoopFunctionA(), OneLoopFunctionB()
* as specified in arXiv:0808.1819
*/

//  TODO:  Several fixes still needed, 1/r is not helpful when r is infinite, 
//  may need to just input mF and mS/mV and then calculate the ratios in-house.

const double ratiolimit = 0.00001;

// function from eq. 15 of hep-ph/9510309
double OneLoopFunctionA(double r)
{
   if (is_zero(1.0 - r)) {
      return 1.5;
   } else if (is_zero(r)) {
      return 2.0;
   } else if (1./r < Power3(ratiolimit)) {
      // Loop function is about 10^-13, treat as reaching the 0 limit
      return 0.;
   } else if (1./r < ratiolimit) {
      // Expand about 0 to 1st order
      return r*(-11.-6.*std::log(r));
   } else {
      return (2.0 - 9.0 * r + 18.0 * r * r - 11.0 * r * r * r +
              6.0 * r * r * r * std::log(r)) /
             Power4(1.0 - r);
   }
}

double OneLoopFunctionB(double r)
{
   const double y = r - 1.0;
   if (is_zero(r)) {
      return 2.0;
   } else if (std::abs(y) < 0.23) {
      // error around x=1 is <= 10^-12 on an intel i7
      return (1.0000000000000000000 -
              0.4000000000000000000  * y +
              0.2000000000000000000  * y * y -
              0.11428571428571428571 * y * y * y +
              0.07142857142857142857 * y * y * y * y -
              0.04761904761904761905 * y * y * y * y * y +
              0.03333333333333333333 * y * y * y * y * y * y -
              0.02424242424242424242 * y * y * y * y * y * y * y +
              0.0181818181818181818  * y * y * y * y * y * y * y * y -
              0.01398601398601398601 * y * y * y * y * y * y * y * y * y +
              0.01098901098901098901 * y * y * y * y * y * y * y * y * y * y -
              0.0087912087912087912  * y * y * y * y * y * y * y * y * y * y * y +
              0.00714285714285714286 * y * y * y * y * y * y * y * y * y * y * y * y -
              0.0058823529411764706  * y * y * y * y * y * y * y * y * y * y * y * y * y +
              0.0049019607843137255  * y * y * y * y * y * y * y * y * y * y * y * y * y * y -
              0.0041279669762641899  * y * y * y * y * y * y * y * y * y * y * y * y * y * y * y);
   } else if (1./r < ratiolimit) {
      // Expand about 0 to 1st order
      return 4.*r;
   } else {
      return 2. *
             (1.0 - 6.0 * r + 3.0 * r * r + 2.0 * r * r * r -
              6.0 * r * r * std::log(r)) /
             Power4(1.0 - r);
   }
}

double OneLoopFunctionC(double r)
{
   const double y = r - 1.0;
   if (is_zero(r)) {
      return 3.0;
   } else if (std::isinf(r)) {
      return 3.0;
   } else if (std::abs(y) < 0.185) {
      // error around x=1 is <= 10^-13 on an intel i7
      return (1.0000000000000000000 -
              0.50000000000000000000 * y +
              0.30000000000000000000 * y * y -
              0.2000000000000000000  * y * y * y +
              0.14285714285714285714 * y * y * y * y -
              0.10714285714285714286 * y * y * y * y * y +
              0.08333333333333333333 * y * y * y * y * y * y -
              0.06666666666666666667 * y * y * y * y * y * y * y +
              0.05454545454545454545 * y * y * y * y * y * y * y * y -
              0.0454545454545454545  * y * y * y * y * y * y * y * y * y +
              0.0384615384615384615  * y * y * y * y * y * y * y * y * y * y -
              0.03296703296703296703 * y * y * y * y * y * y * y * y * y * y * y +
              0.0285714285714285714  * y * y * y * y * y * y * y * y * y * y * y * y -
              0.02500000000000000000 * y * y * y * y * y * y * y * y * y * y * y * y * y +
              0.0220588235294117647  * y * y * y * y * y * y * y * y * y * y * y * y * y * y -
              0.0196078431372549020  * y * y * y * y * y * y * y * y * y * y * y * y * y * y * y);
   } else if (1./r < ratiolimit) {
      // Expand about 0 to 1st order
      return 3.*r;
   } else {
      return 3. * (1.0 - r * r + 2.0 * r * std::log(r)) / Power3(1.0 - r);
   }
}

double OneLoopFunctionD(double r)
{
   if (std::isinf(r)) {
      return 0.0;
   } else if (is_zero(1.0 - r)) {
      return -4.5;
   } else if (1./r < ratiolimit) {
      // Expand about 0 to 1st order
      return -7.*r;
   } else {
      return (16.0 - 45.0 * r + 36.0 * r * r - 7.0 * r * r * r +
              6.0 * (2.0 - 3.0 * r) * std::log(r)) /
             Power4(1.0 - r);
   }
}

double OneLoopFunctionE(double r)
{
   const double y = r - 1.0;
   if (is_zero(r)) {
      return 12.0;
   } else if (std::abs(y) < 0.21) {
      // error around x=1 is <= 10^-12 on an intel i7
      return (1.0000000000000000000 -
              0.60000000000000000000  * y +
              0.40000000000000000000  * y * y -
              0.28571428571428571429  * y * y * y +
              0.21428571428571428571  * y * y * y * y -
              0.16666666666666666667  * y * y * y * y * y +
              0.13333333333333333333  * y * y * y * y * y * y -
              0.10909090909090909091  * y * y * y * y * y * y * y +
              0.090909090909090909091 * y * y * y * y * y * y * y * y -
              0.076923076923076923077 * y * y * y * y * y * y * y * y * y +
              0.065934065934065934066 * y * y * y * y * y * y * y * y * y * y -
              0.057142857142857142857 * y * y * y * y * y * y * y * y * y * y * y +
              0.050000000000000000000 * y * y * y * y * y * y * y * y * y * y * y * y -
              0.044117647058823529412 * y * y * y * y * y * y * y * y * y * y * y * y * y +
              0.039215686274509803922 * y * y * y * y * y * y * y * y * y * y * y * y * y * y -
              0.035087719298245614035 * y * y * y * y * y * y * y * y * y * y * y * y * y * y * y);
   } else if (1./r < ratiolimit) {
      // Expand about 0 to 1st order
      return 2.*r;
   } else {
      return 2. *
             (2.0 + 3.0 * r - 6.0 * r * r + r * r * r + 6.0 * r * std::log(r)) /
             Power4(1.0 - r);
   }
}

double OneLoopFunctionF(double r)
{
   const double y = r - 1.0;
   if (std::abs(y) < 0.155) {
      // error around x=1 is <= 10^-13 on an intel i7
      return (1.0 - 
              0.75 * y + 
              0.6 * y * y -
              0.50000000000000000000 * y * y * y +
              0.4285714285714285714  * y * y * y * y -
              0.37500000000000000000 * y * y * y * y * y +
              0.33333333333333333333 * y * y * y * y * y * y -
              0.3000000000000000000  * y * y * y * y * y * y * y +
              0.2727272727272727273  * y * y * y * y * y * y * y * y -
              0.2500000000000000000  * y * y * y * y * y * y * y * y * y +
              0.23076923076923076923 * y * y * y * y * y * y * y * y * y * y -
              0.21428571428571428571 * y * y * y * y * y * y * y * y * y * y * y +
              0.2000000000000000000  * y * y * y * y * y * y * y * y * y * y * y * y -
              0.1875000000000000000  * y * y * y * y * y * y * y * y * y * y * y * y * y +
              0.1764705882352941176  * y * y * y * y * y * y * y * y * y * y * y * y * y * y -
              0.16666666666666666667 * y * y * y * y * y * y * y * y * y * y * y * y * y * y * y);
   } else if (1./r < ratiolimit) {
      // Expand about 0 to 1st order
      return 1.5*r;
   } else {
      return 3. / 2. * (-3.0 + 4.0 * r - r * r - 2.0 * std::log(r)) /
             Power3(1.0 - r);
   }
}

double OneLoopFunctionH(double r)
{
   if (is_zero(r)) {
      return 5.0;
   } else if (is_zero(1.0 - r)){
      return 0.0;
   } else if (1./r < Power3(ratiolimit)) {
      // Loop function is about 10^-13, treat as reaching the 0 limit
      return 0.;
   } else if (1./r < ratiolimit) {
      // Expand about 0 to 1st order
      return r*(-5.-6.*std::log(r));
   } else {
      return (5.0 - 27.0 * r + 27.0 * r * r - 5.0 * r * r * r + 6.0 * (r - 3.0) * r * r * std::log(r)) /
              Power4(1.0 - r);
   }
}

double OneLoopFunctionI(double r)
{
   if (is_zero(r)) {
      return 1.0;
   } else if (is_zero(1.0 - r)){
      return 0.5;
   } else if (1./r < Power3(ratiolimit)) {
      // Loop function is about 10^-13, treat as reaching the 0 limit
      return 0.;
   } else if (1./r < ratiolimit) {
      // Expand about 0 to 1st order
      return r*(-1.-1.*std::log(r));
   } else {
      return (1.0 - r + r * std::log(r)) / Power2(1.0 - r);
   }
}

double OneLoopFunctionJ(double r)
{
   if (is_zero(r)) {
      return 7.0;
   } else if (is_zero(1.0 - r)){
      return 5.0;
   } else if (1./r < Power3(ratiolimit)) {
      // Loop function is about 10^-13, treat as reaching the 0 limit
      return 0.;
   } else if (1./r < ratiolimit) {
      // Expand about 0 to 1st order
      return r*(-31.-18.*std::log(r));
   } else {
      return (7.0 - 33.0 * r + 57.0 * r * r - 31.0 * r * r * r + 6.0 * r * r * (3.0 * r - 1.0)
                   * std::log(r)) / Power4(1.0 - r);
   }
}

double OneLoopFunctionK(double r)
{
   if (is_zero(r)) {
      return 1.0;
   } else if (is_zero(1.0 - r)){
      return 2.0 / 3.0;
   } else if (1./r < Power3(ratiolimit)) {
      // Loop function is about 10^-13, treat as reaching the 0 limit
      return 0.;
   } else if (1./r < ratiolimit) {
      // Expand about 0 to 1st order
      return r*(-3.-2.*std::log(r));
   } else {   
      return (1.0 - 4.0 * r + 3.0 * r * r - 2 * r * r * std::log(r)) / Power3(1.0 - r);
   }
}

double OneLoopFunctionL(double r)
{  
   if (is_zero(r)) {
      return -10.0;
   } else if (is_zero(1.0 - r)){
      return 10.5;
   } else if (1./r < ratiolimit) {
      // Expand about 0 to 1st order
      return 25.*r;
   } else {
      return (2.0 + 27.0 * r - 54.0 * r * r + 25.0 * r * r * r - 6.0 * (2.0 - 9.0 * r + 6.0 * r * r)
                 * std::log(r)) / Power4(1.0 - r);
   }
}

double OneLoopFunctionM(double r)
{
   if (is_zero(r)) {
      return 4.0;
   } else if (is_zero(1.0 - r)){
      return 1.5;
   } else if (1./r < ratiolimit) {
      // Expand about 0 to 1st order
      return 5.*r;
   } else {
      return (4.0 - 9.0 * r + 5.0 * r * r * r + 6.0 * (1.0 - 2.0 * r) * r * std::log(r)) / 
              Power4(1.0 - r);
   }
}

double OneLoopFunctionN(double r, double s)
{
   if (is_zero(r - s)) {
      if (is_zero(r)) {
         return 1.0;
      } else if (is_zero(1.0 - r)){
         return 2.0 / 3.0;
      } else {
         return (1.0 - 4.0 * r + 3 * r * r - 2 * r * r * std::log(r)) / 2.0 / Power3(1.0 - r);
      }
   } else if (1./s < ratiolimit) {
      // Expand s about 0 to 1st order
      return (1.0 - r * r * s + r * (s - 1.0) + r * (s + 1.0) * std::log(r)) / Power2(r - 1.0);
   } else {
      return s * (r * Power2(r - s) * std::log(r) + (r - 1.0) * ((r - s) * (s - 1.0) - (r - 1.0)
                              * r * std::log(r/s))) / Power2(1.0 - r) / Power2(r - s) / (s - 1.0);
   }
}


double Kallenlambda(double m1, double m2, double m3)
{
    return Power2(m1) + Power2(m2) + Power2(m3) - 2.*m1*m2 - 2.*m2*m3 - 2.*m3*m1;
}

double Kallenlambdasqrt(double m1, double m2, double m3)
{
    return std::sqrt(Kallenlambda(m1,m2,m3));
}

double DiscontinuityB(double m12, double m2, double m3)
{
    return Kallenlambdasqrt(m12,Power2(m2),Power2(m3)) 
	    * std::log((Power2(m2)+Power2(m3)-m12+Kallenlambdasqrt(m12,Power2(m2),Power2(m3)))/(2.*m2*m3)) / m12;
}

double signed_dilog(double x, double a)
{
    if (a > 0.)
    {
        return -1./2. * Power2(std::log(1./(1.-x))) - dilog(x/(x-1.));
    } else if (a < 0.) {
        return dilog(x);
    }
}

double ScalarC0(double M22, double M32, double m1, double m2, double m3)
{
    if (is_zero(M22 - M32))
    {
        if (is_zero(m1 - m2))
        {
            return (Power2(m1)-M22-Power2(m3)) * DiscontinuityB(M22,m1,m3)
                    / Kallenlambda(Power2(m1),M22,Power2(m3)) + std::log(m3/m1) / M22;
        } else {
            return (M22*(DiscontinuityB(M22,m1,m3)-DiscontinuityB(M22,m2,m3)-std::log(m1/m2))
                    + Power2(m3)*std::log(m1/m2) + Power2(m2)*std::log(m2/m3) + Power2(m1)*std::log(m3/m1))
                    / ((m1-m2) * (m1+m2) * M22);
        }
    } else {
       double dilog1 = signeddilog(2.*(Power2(m1)*M22-Power2(m2)*M32+Power2(m3)*(M32-M22)) 
		       / (-2.*Power2(m2)*M32+Power2(m1)*(M22+M32)+(M22-M32)*(-Power2(m3)+M32)+(M22-M32)*Kallenlambdasqrt(Power2(m1),Power2(m3),M32)),
		       -(M22-M32)*M32*(Power2(m1)*M22-Power2(m2)*M32+Power2(m3)*(-M22+M32)));
       double dilog2 = signeddilog((2.*Power2(m1)*M22-2.*Power2(m2)*M32+2.*(M22-M32)*(-Power2(m3)+M32)) 
		       / (-2.*Power2(m2)*M32+Power2(m1)*(M22+M32)+(M22-M32)*(-Power2(m3)+M32)+(M22-M32)*Kallenlambdasqrt(Power2(m1),Power2(m3),M32)),
                       -(M22-M32)*M32*(Power2(m1)*M22-Power2(m2)*M32+(M22-M32)*(-Power2(m3)+M32)));
       double dilog3 = signeddilog((2.*(Power2(m1)*M22-Power2(m2)*M32+Power2(m3)*(-M22+M32))) 
	               / (-2.*Power2(m2)*M32+Power2(m1)*(M22+M32)+(M22-M32)*(-Power2(m3)+M32)+(-M22+M32)*Kallenlambdasqrt(Power2(m1),Power2(m3),M32)),
	               (M22-M32)*M32*(Power2(m1)*M22-Power2(m2)*M32+Power2(m3)*(-M22+M32)));
       double dilog4 = signeddilog((2.*Power2(m1)*M22-2.*Power2(m2)*M32+2.*(M22-M32)*(-Power2(m3)+M32)) 
	               / (-2.*Power2(m2)*M32+Power2(m1)*(M22+M32)+(M22-M32)*(-Power2(m3)+M32)+(-M22+M32)*Kallenlambdasqrt(Power2(m1),Power2(m3),M32)),
	               (M22-M32)*M32*(Power2(m1)*M22-Power2(m2)*M32+(M22-M32)*(-Power2(m3)+M32)));
       double dilog5 = signeddilog((2.*Power2(m1)*M22+2.*(M22-Power2(m3))*(M22-M32)-2.*Power2(m2)*M32) 
	               / (2.*Power2(m1)*M22+(M22-Power2(m3))*(M22-M32)-Power2(m2)*(M22+M32)+(M22-M32)*Kallenlambdasqrt(Power2(m2),M22,Power2(m3))),
		       -M22*(M22-M32)*(Power2(m1)*M22+(M22-Power2(m3))*(M22-M32)-Power2(m2)*M32));
       double dilog6 = signeddilog((2.*(Power2(m1)*M22-Power2(m2)*M32+Power2(m3)*(-M22+M32))) 
	               / (2.*Power2(m1)*M22+(M22-Power2(m3))*(M22-M32)-Power2(m2)*(M22+M32)+(M22-M32)*Kallenlambdasqrt(Power2(m2),M22,Power2(m3))),
	               -M22*(M22-M32)*(Power2(m1)*M22-Power2(m2)*M32+Power2(m3)*(-M22+M32)));
       double dilog7 = signeddilog((2.*Power2(m1)*M22+2.*(M22-Power2(m3))*(M22-M32)-2.*Power2(m2)*M32) 
	               / (2.*Power2(m1)*M22+(M22-Power2(m3))*(M22-M32)-Power2(m2)*(M22+M32)+(-M22+M32)*Kallenlambdasqrt(Power2(m2),M22,Power2(m3))),
		       M22*(M22-M32)*(Power2(m1)*M22+(M22-Power2(m3))*(M22-M32)-Power2(m2)*M32));
       double dilog8 = signeddilog((2.*(Power2(m1)*M22-Power2(m2)*M32+Power2(m3)*(-M22+M32))) 
                       / (2.*Power2(m1)*M22+(M22-Power2(m3))*(M22-M32)-Power2(m2)*(M22+M32)+(-M22+M32)*Kallenlambdasqrt(Power2(m2),M22,Power2(m3))),
		       M22*(M22-M32)*(Power2(m1)*M22-Power2(m2)*M32+Power2(m3)*(-M22+M32)));
       double polylog1 = ((m1-m2)*(m1+m2)*(Power2(m1)*M22+(M22-Power2(m3))*(M22-M32)-Power2(m2)*M32)) 
                         / (Power4(m1)*M22+Power2(m2)*(M22-M32)*(Power2(m3)-M32)+Power4(m2)*M32+Power2(m1)*((M22-Power2(m3))*(M22-M32)-Power2(m2)*(M22+M32)));
       double polylog2 = ((m1-m2)*(m1+m2)*(Power2(m1)*M22-Power2(m2)*M32+(M22-M32)*(-Power2(m3)+M32))) 
                         / (Power4(m1)*M22+Power2(m2)*(M22-M32)*(Power2(m3)-M32)+Power4(m2)*M32+Power2(m1)*((M22-Power2(m3))*(M22-M32)-Power2(m2)*(M22+M32)));
       return (-dilog1+dilog2-dilog3+dilog4-dilog5+dilog6-dilog7+dilog8+polylog1-polylog2) / (M22-M32); 
    }
}


// emit massless vector boson from the internal scalar line
template <class Fj, class Fi, class V, class SA, class SB, class F>
std::valarray<std::complex<double>> FFV_SSF<Fj, Fi, V, SA, SB, F>::value(
   const typename field_indices<Fj>::type& indices_in,
   const typename field_indices<Fi>::type& indices_out,
   context_base const& context,
   bool discard_SM_contributions)
{

   static_assert(
      std::is_same<SA, SB>::type::value,
      "Internal scalars in the FFV_SSF instantiation must be of the same type."
   );

   using VertexFBarFjSBar = Vertex<typename F::lorentz_conjugate, typename SA::lorentz_conjugate, Fj>;
   using VertexFiBarFS    = Vertex<typename Fi::lorentz_conjugate, SB, F>;
   using VertexSBarSVBar  = Vertex<typename SB::lorentz_conjugate, SA, typename V::lorentz_conjugate>;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mi = context.mass<Fi>(indices_out);

   // loop over all possible particle generations attached to both vertices
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
   for (const auto& indexIn: index_range<VertexFBarFjSBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFS>()) {

         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFBarFjSBar::template indices_of_field<2>(indexIn);
         const auto iFieldIndices = VertexFiBarFS::template indices_of_field<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the fermion in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFS::template indices_of_field<2>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // match indices of the scalar in the loop
         const auto scalarFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<1>(indexIn);
         const auto scalarIndicesOut = VertexFiBarFS::template indices_of_field<1>(indexOut);
         if (scalarFieldIndicesIn != scalarIndicesOut) 
            continue;

         if (discard_SM_contributions) {
            if (isSMField<SA>(scalarFieldIndicesIn) && isSMField<F>(fermionFieldIndicesIn)) {
               continue;
            }
         }

         const auto vertexIn = VertexFBarFjSBar::evaluate(indexIn, context);
         const auto vertexOut = VertexFiBarFS::evaluate(indexOut, context);

         const auto indexEmit = concatenate(scalarFieldIndicesIn, scalarFieldIndicesIn);
         const auto vertexEmit = VertexSBarSVBar::evaluate(indexEmit, context);

         const auto mS = context.mass<SA>(scalarFieldIndicesIn);
         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         const auto x = Power2(mF/mS);

         // TODO: check the sign convention of this coupling
         std::complex<double> vector_boson_coupling {-vertexEmit.value(1,0)};

         // eq. 15 of hep-ph/9510309 (possibly with different sign)
         const std::complex<double> A1L =
            - 1./18. * vertexOut.right() * vertexIn.left() * OneLoopFunctionA(x);
         // eq. 16 of hep-ph/9510309 (possibly with different sign)
         const std::complex<double> A2L = 
            - vertexOut.left() * vertexIn.right() * OneLoopFunctionB(x)/12.
            - vertexOut.left()* vertexIn.left() * mF/mj * OneLoopFunctionC(x)/3.
            - mi/mj * vertexOut.right() * vertexIn.left() * OneLoopFunctionB(x)/12.; 

         // eq. 15 & 16 of hep-ph/9510309 after replacement L <-> R (possibly with different sign)
         const std::complex<double> A1R = 
            - 1./18. * vertexOut.left() * vertexIn.right() * OneLoopFunctionA(x);
         const std::complex<double> A2R = 
            - vertexOut.right() * vertexIn.left() * OneLoopFunctionB(x)/12. 
            - vertexOut.right()* vertexIn.right() * mF/mj * OneLoopFunctionC(x)/3.
            - mi/mj * vertexOut.left() * vertexIn.right() * OneLoopFunctionB(x)/12.; 

         const std::complex<double> massFactor = Power2(1.0/mS);

         res += oneOver32PiSqr * vector_boson_coupling * massFactor
            * std::valarray<std::complex<double>> {A1L, A1R, A2L, A2R};
      }
   }

   return res;
}

// emit massless vector boson from the internal fermion line
template <class Fj, class Fi, class V, class FA, class FB, class S>
std::valarray<std::complex<double>> FFV_FFS<Fj, Fi, V, FA, FB, S>::value(
   const typename field_indices<Fj>::type& indices_in,
   const typename field_indices<Fi>::type& indices_out,
   context_base const& context,
   bool discard_SM_contributions)
{

   static_assert(
      std::is_same<FA, FB>::type::value, 
      "Internal fermions in the FFV_FFS instantiation must be of the same type."
   );

   using VertexFBarFjSBar = Vertex<typename S::lorentz_conjugate, typename FA::lorentz_conjugate, Fj>;
   using VertexFiBarFS    = Vertex<typename Fi::lorentz_conjugate, FB, S>;
   using VertexFBarFVBar  = Vertex<typename FB::lorentz_conjugate, FA, typename V::lorentz_conjugate>;
   
   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mi = context.mass<Fi>(indices_out);

   // loop over all possible particle generations attached to both vertices
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
   for (const auto& indexIn: index_range<VertexFBarFjSBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFS>()) {

         // cycle if generations of external fermions are different then requested   
         const auto jFieldIndices = VertexFBarFjSBar::template indices_of_field<2>(indexIn);
         const auto iFieldIndices = VertexFiBarFS::template indices_of_field<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         const auto fermionFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<1>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFS::template indices_of_field<1>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut )
            continue;

         const auto scalarFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<0>(indexIn);
         const auto scalarIndicesOut = VertexFiBarFS::template indices_of_field<2>(indexOut);
         if (scalarFieldIndicesIn != scalarIndicesOut) 
            continue;

         if (discard_SM_contributions) {
            if (isSMField<S>(scalarFieldIndicesIn) && isSMField<FA>(fermionFieldIndicesIn)) {
               continue;
            }
         }

         const auto vertexIn = VertexFBarFjSBar::evaluate(indexIn, context);
         const auto vertexOut = VertexFiBarFS::evaluate(indexOut, context);
         
         const auto indexEmit = concatenate(fermionFieldIndicesIn, fermionFieldIndicesIn);
         const auto vertexEmit = VertexFBarFVBar::evaluate(indexEmit, context);

         const auto mF = context.mass<FA>(fermionFieldIndicesIn);
         const auto mS = context.mass<S>(scalarFieldIndicesIn);
         const auto x = Power2(mF/mS);

         std::complex<double> vector_boson_coupling {vertexEmit.left()};

         // eq. 18 of hep-ph/9510309 (possibly with different sign)
         const std::complex<double> A1L =
            - 1./18. * vertexOut.right() * vertexIn.left() * OneLoopFunctionD(x);
         // eq. 19 of hep-ph/9510309 (possibly with different sign)
         const std::complex<double> A2L = 
            - vertexOut.left() * vertexIn.right() * OneLoopFunctionE(x)/12.0 
            - vertexOut.left()* vertexIn.left() * mF/mj * OneLoopFunctionF(x) * 2./3.
            - mi/mj * vertexOut.right() * vertexIn.left() * OneLoopFunctionE(x)/12.0;

         // eq. 18 & 18 of hep-ph/9510309 after replacement L <-> R (possibly with different sign)
         const std::complex<double> A1R = 
            - 1./18. * vertexOut.left() * vertexIn.right() * OneLoopFunctionD(x);
         const std::complex<double> A2R = 
            - vertexOut.right() * vertexIn.left() * OneLoopFunctionE(x)/12.0 
            - vertexOut.right()* vertexIn.right() * mF/mj * OneLoopFunctionF(x) * 2./3.
            - mi/mj * vertexOut.left() * vertexIn.right() * OneLoopFunctionE(x)/12.0; 

         const std::complex<double> massFactor = Power2(1.0/mS);

         res += oneOver32PiSqr * vector_boson_coupling * massFactor
            * std::valarray<std::complex<double>> {A1L, A1R, A2L, A2R};
      }
   }

   return res;
}

// emit massless vector boson from the internal vector line in a fermion-vector loop
template <class Fj, class Fi, class P, class VA, class VB, class F>
std::valarray<std::complex<double>> FFV_VVF<Fj, Fi, P, VA, VB, F>::value(
   const typename field_indices<Fj>::type& indices_in,
   const typename field_indices<Fi>::type& indices_out,
   context_base const& context,
   bool discard_SM_contributions)
{

   static_assert(
       std::is_same<VA, VB>::type::value,
       "Internal vectors in the FFV_VVF instantiation must be of the same type."
   );

   // use P for external massless vector so as not to confuse with the internal vectors
   using VertexFBarFjVBar = Vertex<typename F::lorentz_conjugate, typename VA::lorentz_conjugate, Fj>;
   using VertexFiBarFV = Vertex<typename Fi::lorentz_conjugate, VB, F>;
   using VertexVBarVPBar = Vertex<typename VB::lorentz_conjugate, VA, typename P::lorentz_conjugate>;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mi = context.mass<Fi>(indices_out);

   // loop over all possible particle generations attached to both vertices
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
   for (const auto& indexIn: index_range<VertexFBarFjVBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFV>()) {
          
         // cycle if generations of external fermions are different then requested
         const auto jFieldIndices = VertexFBarFjVBar::template indices_of_field<2>(indexIn);
         const auto iFieldIndices = VertexFiBarFV::template indices_of_field<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;
         
         // match indices of the fermion in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjVBar::template indices_of_field<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFV::template indices_of_field<2>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // match indices of the vector in the loop
         const auto vectorFieldIndicesIn = VertexFBarFjVBar::template indices_of_field<1>(indexIn);
         const auto vectorFieldIndicesOut = VertexFiBarFV::template indices_of_field<1>(indexOut);
         if (vectorFieldIndicesIn != vectorFieldIndicesOut)
            continue;

         // ignore contribution if both vector and fermion are SM particles
         if (discard_SM_contributions) {
            if (isSMField<VA>(vectorFieldIndicesIn) && isSMField<F>(fermionFieldIndicesIn)) {
               continue;
            }
         }

         const auto vertexIn = VertexFBarFjVBar::evaluate(indexIn, context);
         const auto vertexOut = VertexFiBarFV::evaluate(indexOut, context);

         const auto indexEmit = concatenate(vectorFieldIndicesIn, vectorFieldIndicesIn);
         const auto vertexEmit = VertexVBarVPBar::evaluate(indexEmit, context);

         const auto mV = context.mass<VA>(vectorFieldIndicesIn);
         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         const auto x = Power2(mF/mV);

         // triple gauge boson vertex
         // need to check that the sign and function call are correct
         std::complex<double> vector_boson_coupling {-vertexEmit.value( TripleVectorVertex::even_permutation{} )};

         const std::complex<double> A1L = 
            - 8. * mF/mj * vertexIn.right() * vertexOut.left() * OneLoopFunctionI(x) 
            + mi/mj * vertexIn.left() * vertexOut.left() * OneLoopFunctionH(x) / 18.;
         const std::complex<double> A2L = 
            3. * mF/mj * vertexIn.left() * vertexOut.right() * OneLoopFunctionK(x) 
            + mi/mj * vertexIn.left() * vertexOut.left() * OneLoopFunctionJ(x) / 6. 
            + vertexIn.right() * vertexOut.right() * OneLoopFunctionJ(x) / 6.;
         
         const std::complex<double> A1R = 
            - 8. * mF/mj * vertexIn.left() * vertexOut.right() * OneLoopFunctionI(x) 
            + mi/mj * vertexIn.right() * vertexOut.right() * OneLoopFunctionH(x) / 18.;
         const std::complex<double> A2R = 
            3. * mF/mj * vertexIn.right() * vertexOut.left() * OneLoopFunctionK(x) 
            + mi/mj * vertexIn.right() * vertexOut.right() * OneLoopFunctionJ(x) / 6. 
            + vertexIn.left() * vertexOut.left() * OneLoopFunctionJ(x) / 6.;

         const std::complex<double> massFactor = Power2(1.0/mV);

         res += oneOver32PiSqr * vector_boson_coupling * massFactor * std::valarray<std::complex<double>> {A1L,A1R,A2L,A2R};
      }
   }

   return res;

}

// emit massless vector boson from the internal vector line in a fermion-vector loop
template <class Fj, class Fi, class P, class FA, class FB, class V>
std::valarray<std::complex<double>> FFV_FFV<Fj, Fi, P, FA, FB, V>::value(
   const typename field_indices<Fj>::type& indices_in,
   const typename field_indices<Fi>::type& indices_out,
   context_base const& context,
   bool discard_SM_contributions)
{

   static_assert(
      std::is_same<FA, FB>::type::value,
      "Internal fermions in the FFV_FFV instantiation must be of the same type."
   );

   // use P for external massless vector so as not to confuse with the internal vectors
   using VertexFBarFjVBar = Vertex<typename V::lorentz_conjugate, typename FA::lorentz_conjugate, Fj>;
   using VertexFiBarFV = Vertex<typename Fi::lorentz_conjugate, FB, V>;
   using VertexFBarFPBar = Vertex<typename FB::lorentz_conjugate, FA, typename P::lorentz_conjugate>;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mi = context.mass<Fi>(indices_out);

   // loop over all possible particle generations attached to both vertices
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
   for (const auto& indexIn: index_range<VertexFBarFjVBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFV>()) {
           
         // cycle if generations of external fermions are different then requested
         const auto jFieldIndices = VertexFBarFjVBar::template indices_of_field<2>(indexIn);
         const auto iFieldIndices = VertexFiBarFV::template indices_of_field<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the fermion in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjVBar::template indices_of_field<1>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFV::template indices_of_field<1>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // match indices of the vector in the loop
         const auto vectorFieldIndicesIn = VertexFBarFjVBar::template indices_of_field<0>(indexIn);
         const auto vectorFieldIndicesOut = VertexFiBarFV::template indices_of_field<2>(indexOut);
         if (vectorFieldIndicesIn != vectorFieldIndicesOut)
            continue;

         // ignore contribution if both vector and fermion are SM particles
         if (discard_SM_contributions) {
            if (isSMField<FA>(fermionFieldIndicesIn) && isSMField<V>(vectorFieldIndicesIn)) {
               continue;
            }
         }

         const auto vertexIn = VertexFBarFjVBar::evaluate(indexIn, context);
         const auto vertexOut = VertexFiBarFV::evaluate(indexOut, context);

         const auto indexEmit = concatenate(fermionFieldIndicesIn, fermionFieldIndicesIn);
         const auto vertexEmit = VertexFBarFPBar::evaluate(indexEmit, context);

         const auto mV = context.mass<V>(vectorFieldIndicesIn);
         const auto mF = context.mass<FA>(fermionFieldIndicesIn);
         const auto x = Power2(mF/mV);

	 std::complex<double> vector_boson_coupling {vertexEmit.left()};

	 // TODO:  Current issue with the code for the case mV=0, when mi==mF or mi==mj,
	 // then this contribution diverges.  

	 std::complex<double> A2L, A2R;
         const std::complex<double> A1L = vertexIn.left() * vertexOut.left() * OneLoopFunctionL(x) / 9.
	    - mi/mj * vertexIn.right() * vertexOut.right() * OneLoopFunctionL(x) / 9.;
	 if (is_zero(mi - mj)) {
	     A2L =
	      vertexIn.left() * vertexOut.right() * 
	        ((8.*mF*Power2(mV)) / Power3(mi) 
	       + (8.*mF*Power4(mV)*Power2(x-1.)*DiscontinuityB(Power2(mi),mF,mV)) / (Power3(mi)*Kallenlambda(Power2(mV),Power2(mi),Power2(mF)))
	       + Power4(mV)*(-((8.*mF*(1.+x)*DiscontinuityB(Power2(mi),mF,mV)) / (mi*Kallenlambda(Power2(mV),Power2(mi),Power2(mF))))-(4.*mF*(x-1.)*std::log(x))/Power5(mi)))
	    + vertexIn.left() * vertexOut.left() * 
	        (-((3.*Power2(mV)) / Power2(mi))
	       - (2.*Power8(mV)*Power3(x-1.)*DiscontinuityB(Power2(mi),mF,mV)) / (Power4(mi)*Kallenlambda(Power2(mV),Power2(mi),Power2(mF)))
	       + (Power4(mV)*(x-1.)*((6.*Power4(mi)*DiscontinuityB(Power2(mi),mF,mV)) / Kallenlambda(Power2(mV),Power2(mi),Power2(mF))+(x-1.)*std::log(x))) / Power6(mi)
	       + Power4(mV)*((2.*(2.+x)*DiscontinuityB(Power2(mi),mF,mV)) / Kallenlambda(Power2(mV),Power2(mi),Power2(mF))+(2.-2.*x+(x-2.)*std::log(x)) / Power4(mi)))
	    + vertexIn.right() * vertexOut.right() *
	        (-((3.*Power2(mV)) / Power2(mi)) 
	       - (2.*Power8(mV)*Power3(x-1.)*DiscontinuityB(Power2(mi),mF,mV)) / (Power4(mi)*Kallenlambda(Power2(mV),Power2(mi),Power2(mF)))
 	       + (Power4(mV)*(x-1.)*((6.*Power4(mi)*DiscontinuityB(Power2(mi),mF,mV)) / Kallenlambda(Power2(mV),Power2(mi),Power2(mF))+(x-1.)*std::log(x))) / Power6(mi)
	       + Power4(mV)*((2.*(2.+x)*DiscontinuityB(Power2(mi),mF,mV)) / Kallenlambda(Power2(mV),Power2(mi),Power2(mF))+(2.-2.*x+(x-2.)*std::log(x)) / Power4(mi)));	 
         } else {
	    A2L =
	      vertexIn.left() * vertexOut.right() *
	        ((8.*mF*Power2(mV)*(-DiscontinuityB(Power2(mi),mF,mV) + DiscontinuityB(Power2(mj),mF,mV))) / (Power2(mi)-Power2(mj)) / mi
	       - (4.*mF*Power4(mV)*(x-1.)*std::log(x)) / (Power3(mi)*Power2(mj)))
	    + vertexIn.right() * vertexOut.right() * 
	        ((2.*Power2(mV)*((mi-mj)*(mi+mj)+(2.*Power2(mi)-Power2(mj))*(DiscontinuityB(Power2(mi),mF,mV)-DiscontinuityB(Power2(mj),mF,mV)))) / Power2(Power2(mi)-Power2(mj))
	       + (Power6(mV)*Power2(x-1.)*std::log(x)) / (Power4(mi)*Power2(mj))
	       + Power4(mV)*(-2.*Power2(mj)*(-2.*Power2(mi)+Power2(mj))*(x-1.)*DiscontinuityB(Power2(mi),mF,mV)-2.*Power2(mi)*Power2(mj)*(x-1)*DiscontinuityB(Power2(mj),mF,mV)+2.*(mi-mj)*(mi+mj)*(Power2(mj)*(x-1)+(Power2(mj)+Power2(mi)*(x-1.))*std::log(x)+2.*Power2(mi)*Power2(mj)*x*ScalarC0(Power2(mi),Power2(mj),mF,mF,mV))) / (Power2(mi)*Power2(mj)*Power2(Power2(mi) - Power2(mj))))
	    + vertexIn.left() * vertexOut.left() *
	        ((2.*Power2(mV)*mj*(-Power2(mi)+Power2(mj)+(Power2(mi)-2.*Power2(mj))*(DiscontinuityB(Power2(mi),mF,mV)-DiscontinuityB(Power2(mj),mF,mV)))) / (mi*Power2(Power2(mi) -Power2(mj)))
	       + (Power6(mV)*Power2(x-1.)*std::log(x)) / (Power3(mi)*Power3(mj))
	       - (2.*Power4(mV)*(Power2(mi)*Power2(mj)*(x-1.)*DiscontinuityB(Power2(mi),mF,mV)+Power2(mi)*(Power2(mi)-2.*Power2(mj))*(x-1.)*DiscontinuityB(Power2(mj),mF,mV)+(Power2(mi)-Power2(mj))*(Power2(mi)*(x-1.)+(Power2(mi)+Power2(mj)*(x-1.))*std::log(x)+2.*Power2(mi)*Power2(mj)*x*ScalarC0(Power2(mi),Power2(mj),mF,mF,mV)))) / (Power3(mi)*mj*Power2(Power2(mi)-Power2(mj))));
	 }
	 // Simplifies to the below when mV,mF >> mi,mj
         // const std::complex<double> A2L = 
         //    - 4. * mF/mj * vertexIn.left() * vertexOut.right() * OneLoopFunctionC(x) / 3. 
         //    + mi/mj * vertexIn.left() * vertexOut.left() * OneLoopFunctionM(x) / 3. 
         //    + vertexIn.right() * vertexOut.right() * OneLoopFunctionM(x) / 3.;

         const std::complex<double> A1R = vertexIn.right() * vertexOut.right() * OneLoopFunctionL(x) / 9.
	    - mi/mj * vertexIn.left() * vertexOut.left() * OneLoopFunctionL(x) / 9.;
	 if (is_zero(mi - mj)) {
	     A2R =
	      vertexIn.right() * vertexOut.left() *
	       	((8.*mF*Power2(mV)) / Power3(mi)
	       + (8.*mF*Power6(mV)*Power2(x-1.)*DiscontinuityB(Power2(mi),mF,mV)) / (Power3(mi)*Kallenlambda(Power2(mV),Power2(mi),Power2(mF)))
	       + Power4(mV)*(-((8.*mF*(x+1.)*DiscontinuityB(Power2(mi),mF,mV)) / (mi*Kallenlambda(Power2(mV),Power2(mi),Power2(mF))))-(4.*mF*(x-1.)*std::log(x)) / Power5(mi)))
	    + vertexIn.left() * vertexOut.left() * 
	        (-((3.*Power2(mV)) / Power2(mi))
	       - (2.*Power8(mV)*Power3(x-1.)*DiscontinuityB(Power2(mi),mF,mV)) / (Power4(mi)*Kallenlambda(Power2(mV),Power2(mi),Power2(mF))) 
	       + (Power6(mV)*(x-1.)*((6.*Power4(mi)*DiscontinuityB(Power2(mi),mF,mV)) / Kallenlambda(Power2(mV),Power2(mi),Power2(mF))+(x-1.)*std::log(x))) / Power6(mi)
	       + Power4(mV)*((2.*(2.+x)*DiscontinuityB(Power2(mi),mF,mV)) / Kallenlambda(Power2(mV),Power2(mi),Power2(mF))+(2.-2.*x+(x-2.)*std::log(x)) / Power4(mi)))
	    + vertexIn.right() * vertexOut.right() *
	         (-((3.*Power2(mV)) / Power2(mi))
	       - (2.*Power8(mV)*Power3(x-1.)*DiscontinuityB(Power2(mi),mF,mV)) / (Power4(mi)*Kallenlambda(Power2(mV),Power2(mi),Power2(mF)))
	       + (Power6(mV)*(x-1.)*((6.*Power4(mi)*DiscontinuityB(Power2(mi),mF,mV)) / Kallenlambda(Power2(mV),Power2(mi),Power2(mF))+(x-1.)*std::log(x))) / Power6(mi)
	       + Power4(mV)*((2.*(2.+x)*DiscontinuityB(Power2(mi),mF,mV)) / Kallenlambda(Power2(mV),Power2(mi),Power2(mF))+(2.-2.*x+(x-2.)*std::log(x)) / Power4(mi)));
         } else {
	     A2R =
              vertexIn.left() * vertexOut.right() * 
	        (8.*mF*Power2(mV)*(DiscontinuityB(Power2(mj),mF,mV)-DiscontinuityB(Power2(mi),mF,mV)) / (mi*mi*mi-mi*mj*mj) 
	       - 4.*mF*Power4(mV)*(x-1.)*std::log(x) / (Power3(mi)*Power2(mj)))
            + vertexIn.left() * vertexOut.left() * 
	        (2.*Power2(mV)*((mi-mj)*(mi+mj)+(2.*Power2(mi)-Power2(mj))*(DiscontinuityB(Power2(mi),mF,mV)-DiscontinuityB(Power2(mj),mF,mV))) / Power2(Power2(mi)-Power2(mj))
	       + Power6(mV)*Power2(x-1.)*std::log(x) / (Power4(mi)*Power2(mj))
	       + Power4(mV)*(-2.*Power2(mj)*(-2.*Power2(mi)+Power2(mj))*(x-1.)*DiscontinuityB(Power2(mi),mF,mV)-2.*Power2(mi)*Power2(mj)*(x-1.)*DiscontinuityB(Power2(mi),mF,mV)+2.*(mi-mj)*(mi+mj)*(Power2(mj)*(x-1.)+(Power2(mj)+Power2(mi)*(x-1.))*std::log(x)+2.*Power2(mi)*Power2(mj)*x*ScalarC0(Power2(mi),Power2(mj),mF,mF,mV))) / (Power2(mi)*Power2(mj)*Power2(Power2(mi)-Power2(mj))))
            + vertexIn.right() * vertexOut.right() *
	      ((2.*Power2(mV)*mj*(-Power2(mi)+Power2(mj)+(Power2(mi)-2.*Power2(mj))*(DiscontinuityB(Power2(mi),mF,mV)-DiscontinuityB(Power2(mj),mF,mV)))) / (mi*Power2(Power2(mi)-Power2(mj)))
	       + (Power6(mV)*Power2(x-1.)*std::log(x)) / (Power3(mi)*Power3(mj))
	       - (2.*Power4(mV)*(Power2(mi)*Power2(mj)*(x-1.)*DiscontinuityB(Power2(mi),mF,mV)+Power2(mi)*(Power2(mi)-2.*Power2(mj))*(x-1.)*DiscontinuityB(Power2(mj),mF,mV) + (Power2(mi)-Power2(mj))*(Power2(mi)*(x-1.)+(Power2(mi)+Power2(mj)*(x-1.))*std::log(x)+2.*Power2(mi)*Power2(mj)*x*ScalarC0(Power2(mi),Power2(mj),mF,mF,mV)))) / (Power3(mi)*mj*Power2(Power2(mi)-Power2(mj))));
	 }
	 // Simplifies to the below when mV,mF >> mi,mj
         //const std::complex<double> A2R = 
         //   - 4. * mF/mj * vertexIn.right() * vertexOut.left() * OneLoopFunctionC(x) / 3. 
         //   + mi/mj * vertexIn.right() * vertexOut.right() * OneLoopFunctionM(x) / 3. 
         //   + vertexIn.left() * vertexOut.left() * OneLoopFunctionM(x) / 3.;

	 std::complex<double> massFactor = 0.0;
         if (std::isinf(x)) {
            massFactor = Power2(1.0/mF);
         } else {
            massFactor = Power2(1.0/mV);
         }

         res += oneOver32PiSqr * vector_boson_coupling * massFactor * std::valarray<std::complex<double>> {A1L,A1R,A2L,A2R};
      }
   }

   return res;

}

// emit massless vector boson from the internal vector line in a fermion-vector loop
template <class Fj, class Fi, class P, class VA, class GB, class F>
std::valarray<std::complex<double>> FFV_VSF<Fj, Fi, P, VA, GB, F>::value(
   const typename field_indices<Fj>::type& indices_in,
   const typename field_indices<Fi>::type& indices_out,
   context_base const& context,
   bool discard_SM_contributions)
{

   // do not assert that VA and GB are the same
   // static_assert(
   //     std::is_same<VA, GB>::type::value,
   //     "Internal vectors in the FFV_VGF instantiation must be of the same type."
   // );

   // use P for external massless vector so as not to confuse with the internal vectors
   using VertexFBarFjVBar = Vertex<typename F::lorentz_conjugate, typename VA::lorentz_conjugate, Fj>;
   using VertexFiBarFG = Vertex<typename Fi::lorentz_conjugate, GB, F>;
   using VertexGBarVPBar = Vertex<typename GB::lorentz_conjugate, VA, typename P::lorentz_conjugate>;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mi = context.mass<Fi>(indices_out);

   // loop over all possible particle generations attached to both vertices
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
   for (const auto& indexIn: index_range<VertexFBarFjVBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFG>()) {
          
         // cycle if generations of external fermions are different then requested
         const auto jFieldIndices = VertexFBarFjVBar::template indices_of_field<2>(indexIn);
         const auto iFieldIndices = VertexFiBarFG::template indices_of_field<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;
         
         // match indices of the fermion in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjVBar::template indices_of_field<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFG::template indices_of_field<2>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // cannot match indices if scalar is not would-be-goldstone corresponding to vector
         const auto vectorFieldIndicesIn = VertexFBarFjVBar::template indices_of_field<1>(indexIn);
         const auto goldstoneFieldIndicesOut = VertexFiBarFG::template indices_of_field<1>(indexOut);
         // if (vectorFieldIndicesIn != goldstoneFieldIndicesOut)
         //   continue;

         // ignore contribution if both vector and fermion are SM particles
         if (discard_SM_contributions) {
            if (isSMField<VA>(vectorFieldIndicesIn) && isSMField<GB>(goldstoneFieldIndicesOut) && isSMField<F>(fermionFieldIndicesIn)) {
               continue;
            }
         }

         const auto vertexIn = VertexFBarFjVBar::evaluate(indexIn, context);
         const auto vertexOut = VertexFiBarFG::evaluate(indexOut, context);

         const auto indexEmit = concatenate(vectorFieldIndicesIn, goldstoneFieldIndicesOut);
         const auto vertexEmit = VertexGBarVPBar::evaluate(indexEmit, context);

         const auto mV = context.mass<VA>(vectorFieldIndicesIn);
         const auto mG = context.mass<GB>(goldstoneFieldIndicesOut);
         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         const auto x = Power2(mF/mV);
         const auto y = Power2(mF/mG);

         // scalar-vector-vector vertex
         // check that definition and sign is correct
         std::complex<double> vector_boson_coupling {-vertexEmit.value()};

         const std::complex<double> A1L = -1./mj * vertexIn.right() * vertexOut.right() * OneLoopFunctionN(x,y);// / 2.;
         const std::complex<double> A2L = 1./mj * vertexIn.left() * vertexOut.left() * OneLoopFunctionN(x,y);// / 2.;
      
         const std::complex<double> A1R = -1./mj * vertexIn.left() * vertexOut.left() * OneLoopFunctionN(x,y);// / 2.;
         const std::complex<double> A2R = 1./mj * vertexIn.right() * vertexOut.right() * OneLoopFunctionN(x,y);// / 2.;

         const std::complex<double> massFactor = 1.0/mV;//Power2(1.0/mV);
          
         res += oneOver32PiSqr * vector_boson_coupling * massFactor * std::valarray<std::complex<double>> {A1L,A1R,A2L,A2R};
      }
   }

   return res;

}

// emit massless vector boson from the internal vector line in a fermion-vector loop
template <class Fj, class Fi, class P, class GA, class VB, class F>
std::valarray<std::complex<double>> FFV_SVF<Fj, Fi, P, GA, VB, F>::value(
   const typename field_indices<Fj>::type& indices_in,
   const typename field_indices<Fi>::type& indices_out,
   context_base const& context,
   bool discard_SM_contributions)
{

   // do not assert that GA and VB are the same
   // static_assert(
   //     std::is_same<GA, VB>::type::value,
   //     "Internal vectors in the FFV_VGF instantiation must be of the same type."
   // );

   // use P for external massless vector so as not to confuse with the internal vectors
   using VertexFBarFjGBar = Vertex<typename F::lorentz_conjugate, typename GA::lorentz_conjugate, Fj>;
   using VertexFiBarFV = Vertex<typename Fi::lorentz_conjugate, VB, F>;
   using VertexVBarGPBar = Vertex<typename VB::lorentz_conjugate, GA, typename P::lorentz_conjugate>;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mi = context.mass<Fi>(indices_out);

   // loop over all possible particle generations attached to both vertices
   std::valarray<std::complex<double>> res {0.0, 0.0, 0.0, 0.0};
   for (const auto& indexIn: index_range<VertexFBarFjGBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFV>()) {
          
         // cycle if generations of external fermions are different then requested
         const auto jFieldIndices = VertexFBarFjGBar::template indices_of_field<2>(indexIn);
         const auto iFieldIndices = VertexFiBarFV::template indices_of_field<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;
         
         // match indices of the fermion in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjGBar::template indices_of_field<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFV::template indices_of_field<2>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // cannot match indices if scalar is not would-be-goldstone corresponding to vector
         const auto goldstoneFieldIndicesIn = VertexFBarFjGBar::template indices_of_field<1>(indexIn);
         const auto vectorFieldIndicesOut = VertexFiBarFV::template indices_of_field<1>(indexOut);
         // if (goldstoneFieldIndicesIn != vectorFieldIndicesOut)
         //    continue;

         // ignore contribution if both vector and fermion are SM particles
         if (discard_SM_contributions) {
            if (isSMField<GA>(goldstoneFieldIndicesIn) && isSMField<VB>(vectorFieldIndicesOut) && isSMField<F>(fermionFieldIndicesIn)) {
               continue;
            }
         }
   
         const auto vertexIn = VertexFBarFjGBar::evaluate(indexIn, context);
         const auto vertexOut = VertexFiBarFV::evaluate(indexOut, context);

         const auto indexEmit = concatenate(goldstoneFieldIndicesIn, vectorFieldIndicesOut);
         const auto vertexEmit = VertexVBarGPBar::evaluate(indexEmit, context);
   
         const auto mV = context.mass<GA>(goldstoneFieldIndicesIn);
         const auto mG = context.mass<VB>(vectorFieldIndicesOut);
         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         const auto x = Power2(mF/mV);
         const auto y = Power2(mF/mG);

         // scalar-vector-vector vertex
         // check that definition and sign is correct
         std::complex<double> vector_boson_coupling {-vertexEmit.value()};

         const std::complex<double> A1L = 1./mj * vertexIn.right() * vertexOut.left() * OneLoopFunctionN(x,y);// / 2.;
         const std::complex<double> A2L = 1./mj * vertexIn.left() * vertexOut.right() * OneLoopFunctionN(x,y);// / 2.;
      
         const std::complex<double> A1R = 1./mj * vertexIn.left() * vertexOut.right() * OneLoopFunctionN(x,y);// / 2.;
         const std::complex<double> A2R = 1./mj * vertexIn.right() * vertexOut.left() * OneLoopFunctionN(x,y);// / 2.;

         const std::complex<double> massFactor = 1.0/mV;//Power2(1.0/mV);
          
         res += oneOver32PiSqr * vector_boson_coupling * massFactor * std::valarray<std::complex<double>> {A1L,A1R,A2L,A2R};
      }
   }

   return res;

}


} // anonymous namespace
