// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================


/**
 * @file @ModelName@_edm.cpp
 *
 * This file was generated with FlexibleSUSY @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#include "@ModelName@_edm.hpp"

#include "cxx_qft/@ModelName@_qft.hpp"
#include "@ModelName@_FFV_form_factors.hpp"

using namespace flexiblesusy;
using namespace @ModelName@_cxx_diagrams;

namespace flexiblesusy {
namespace @ModelName@_edm {

// spliting templated function into header and cpp
// https://isocpp.org/wiki/faq/templates#separate-template-fn-defn-from-decl
@calculateForwadDeclaration@

template <typename Lepton>
double calculate_edm(const @ModelName@_mass_eigenstates& model, const softsusy::QedQcd& qedqcd@extraIdxDecl@)
{
   context_base context{ model };

   using namespace @ModelName@_cxx_diagrams::fields;

@EDMCalculation@

   const double val =
      // vector form factor
      1./2.*(form_factors[3] - form_factors[2]).imag()
      // reinstate the mass that was factored out in definition of form factor
      * context.mass<Lepton>({@extraIdxUsageNoComma@});

   return val;
}
} // @ModelName@_edm
} // namespace flexiblesusy
