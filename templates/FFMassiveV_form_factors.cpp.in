// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

/**
 * @file @ModelName@_FFMassiveV_form_factors.cpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ and SARAH @SARAHVersion@
 */

#include <valarray>
#include <complex>
#include <iostream>

#include "@ModelName@_mass_eigenstates.hpp"

#include "cxx_qft/@ModelName@_qft.hpp"
#include "cxx_qft/@ModelName@_vertices.hpp"
#include "concatenate.hpp"

#include "wrappers.hpp"

#include "@ModelName@_FFMassiveV_form_factors.hpp"

using namespace flexiblesusy;
using namespace @ModelName@_cxx_diagrams;
using namespace @ModelName@_cxx_diagrams::fields;

namespace {

#include "clooptools.h"

/**
 * @class MuEGammaVertexCorrectionFS
 * @brief A template that calculate contributions to the mu to e gamma
 *        of a given particle in a one loop diagram specified
 *        by a photon emitter and an exchange particle.
 *        Warning! We assume that the vector doesn't change the species
 *        of scalar or fermions.
 * @tparam Args Specifies in order the field of which to
 *              calculate the electric dipole moment,
 *              the photon emitter and the exchange particle
 *              in a one-loop diagram where the photon emitter
 *              is a scalar and the exchange particle a fermion.
 *
 * This template evaluates the contribution to the electric
 * dipole moment of a one loop diagram with fields given by
 * \a Args.
 */
template<class Fj, class Fi, class V, class F, class S>
struct FFMassiveVVertexCorrectionFS {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       context_base const& context);
};

template<class Fj, class Fi, class V, class F, class S>
struct FFVEmitterFj {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       context_base const& context);
};

template<class Fj, class Fi, class V, class F, class S>
struct FFVEmitterFi {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       context_base const& context);
};
template<class Fj, class Fi, class V, class F, class S>
struct FFVEmitterS {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       context_base const& context);
};

template<class Fj, class Fi, class V, class F, class S>
struct FFVEmitterF {
   static std::valarray<std::complex<double>> value(
         const typename field_indices<Fj>::type& indices_in,
         const typename field_indices<Fi>::type& indices_out,
                       context_base const& context);
};
} // anonymous namespace

namespace flexiblesusy {
namespace @ModelName@_FFMassiveV_form_factors {
@FFMassiveVFormFactors_InterfaceDefinitions@
}
} // namespace flexiblesusy

namespace {

template<class V>
typename field_indices<V>::type
default_indices_for_spectator( void );

@FFMassiveVFormFactors_VIndices@

template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFMassiveVVertexCorrectionFS<Fj, Fi, V, F, S>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out, 
      context_base const& context) {

   // using VertexFiBarFjVBar = Vertex<typename Fi::lorentz_conjugate, Fj, typename V::lorentz_conjugate>;
   
   // auto spectator_indices = default_indices_for_spectator<V>();
   // const auto indexFiBarFjVBar = flexiblesusy::cxx_diagrams::impl::concatenate( 
      // flexiblesusy::cxx_diagrams::impl::concatenate( indices_out, indices_in), 
      // spectator_indices);
   // const auto FiBarFjVBar = VertexFiBarFjVBar::evaluate(indexFiBarFjVBar, context);
   
   std::valarray<std::complex<double>> res {0.0, 0.0};
   
   //if(is_zero(abs(FiBarFjVBar.left())) &&  is_zero(abs(FiBarFjVBar.right()))) {
      res += FFVEmitterFj<Fj, Fi, V, F, S>::value(indices_in, indices_out, context);   
      res += FFVEmitterFi<Fj, Fi, V, F, S>::value(indices_in, indices_out, context);   
      res += FFVEmitterF<Fj, Fi, V, F, S>::value(indices_in, indices_out, context);   
      res += FFVEmitterS<Fj, Fi, V, F, S>::value(indices_in, indices_out, context);   
   //} 

   return res;
}

// emit V from the incoming fermion
template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterFj<Fj, Fi, V, F, S>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out, 
      context_base const& context) {

   using VertexFjBarFjVBar = Vertex<typename Fj::lorentz_conjugate, Fj, typename V::lorentz_conjugate>;
   using VertexFBarFjSBar  = Vertex<typename F::lorentz_conjugate, Fj, typename S::lorentz_conjugate>;
   using VertexFiBarFS     = Vertex<typename Fi::lorentz_conjugate, F, S>;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mj2 = mj*mj;
   const auto mi = context.mass<Fi>(indices_out);
   const auto mi2 = mi*mi;
   //#include "/Users/Navir/masses.txt"
   //const auto mj = mFe[indices_in[0]];
   //const auto mj2 = mj*mj;
   //const auto mi = mFe[indices_out[0]];
   //const auto mi2 = mi*mi;

   std::valarray<std::complex<double>> res {0.0, 0.0};
   // loop over all possible particle "generations" attached to both vertices
   for (const auto& indexIn: index_range<VertexFBarFjSBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFS>()) {

         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFBarFjSBar::template indices_of_field<1>(indexIn);
         const auto iFieldIndices = VertexFiBarFS::template indices_of_field<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the scalar field in the loop
         const auto scalarFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<2>(indexIn);
         const auto scalarFieldIndicesOut = VertexFiBarFS::template indices_of_field<2>(indexOut);
         if (scalarFieldIndicesIn != scalarFieldIndicesOut)
            continue;

         // match indices of the fermion field in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFS::template indices_of_field<1>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // get me the FjbarFjV vertex   
         auto spectator_indices = default_indices_for_spectator<V>();
         const auto indexFjbarFjVbar = concatenate( 
            jFieldIndices, jFieldIndices, spectator_indices
         );
         const auto FjBarFjVBar = VertexFjBarFjVBar::evaluate(indexFjbarFjVbar, context);
         const auto FjBarFjVBarL = FjBarFjVBar.left();
         const auto FjBarFjVBarR = FjBarFjVBar.right();

         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         // const auto mF = mChi[fermionFieldIndicesIn[0]];
         const auto mF2 = mF * mF;
         const auto mS = context.mass<S>(scalarFieldIndicesIn);
         // const auto mS = mSe[scalarFieldIndicesIn[0]];
         const auto mS2 = mS*mS;

         const auto FBarFjSBar = VertexFBarFjSBar::evaluate(indexIn, context);
         const auto FBarFjSBarL = FBarFjSBar.left();
         const auto FBarFjSBarR = FBarFjSBar.right();

         const auto FiBarFS = VertexFiBarFS::evaluate(indexOut, context);
         const auto FiBarFSL = FiBarFS.left();
         const auto FiBarFSR = FiBarFS.right();
         
         const std::complex<double> A1L = 
         (FjBarFjVBarL*(-(mF*(FBarFjSBarL*FiBarFSL*mi + FBarFjSBarR*FiBarFSR*mj)*B0i(bb0,mi2,mF2,mS2)) + 
       mi*(FBarFjSBarL*FiBarFSR*mi + FBarFjSBarR*FiBarFSL*mj)*B0i(bb1,mi2,mF2,mS2)))/(16.*(mi2 - mj2)*Power(Pi,2));

         const std::complex<double> A1R = 
         (FjBarFjVBarR*(-(mF*(FBarFjSBarR*FiBarFSR*mi + FBarFjSBarL*FiBarFSL*mj)*B0i(bb0,mi2,mF2,mS2)) + 
       mi*(FBarFjSBarR*FiBarFSL*mi + FBarFjSBarL*FiBarFSR*mj)*B0i(bb1,mi2,mF2,mS2)))/(16.*(mi2 - mj2)*Power(Pi,2));
         
         res += std::valarray<std::complex<double>> {A1L, A1R};
      }
   }

   return res;
}

// emit V from the outgoing fermion
template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterFi<Fj, Fi, V, F, S>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out, 
      context_base const& context) {

   using VertexFiBarFiVBar = Vertex<typename Fi::lorentz_conjugate, Fi, typename V::lorentz_conjugate>;
   using VertexFBarFjSBar  = Vertex<typename F::lorentz_conjugate, Fj, typename S::lorentz_conjugate>;
   using VertexFiBarFS     = Vertex<typename Fi::lorentz_conjugate, F, S>;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mj2 = mj*mj;
   const auto mi = context.mass<Fi>(indices_out);
   const auto mi2 = mi*mi;
   //#include "/Users/Navir/masses.txt"
   //const auto mj = mFe[indices_in[0]];
   //const auto mj2 = mj*mj;
   //const auto mi = mFe[indices_out[0]];
   //const auto mi2 = mi*mi;

   std::valarray<std::complex<double>> res {0.0, 0.0};
   // loop over all possible particle "generations" attached to both vertices
   for (const auto& indexIn: index_range<VertexFBarFjSBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFS>()) {
         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFBarFjSBar::template indices_of_field<1>(indexIn);
         const auto iFieldIndices = VertexFiBarFS::template indices_of_field<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the scalar field in the loop
         const auto scalarFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<2>(indexIn);
         const auto scalarFieldIndicesOut = VertexFiBarFS::template indices_of_field<2>(indexOut);
         if (scalarFieldIndicesIn != scalarFieldIndicesOut)
            continue;

         // match indices of the fermion field in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFS::template indices_of_field<1>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // get me the FiBarFiVBar vertex   
         auto spectator_indices = default_indices_for_spectator<V>();
         const auto indexFiBarFiVBar = concatenate( 
            iFieldIndices, iFieldIndices, 
             spectator_indices);
         const auto FiBarFiVBar = VertexFiBarFiVBar::evaluate(indexFiBarFiVBar, context);
         const auto FiBarFiVBarL = FiBarFiVBar.left();
         const auto FiBarFiVBarR = FiBarFiVBar.right();

         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         // const auto mF = mChi[fermionFieldIndicesIn[0]];
         const auto mF2 = mF * mF;
         const auto mS = context.mass<S>(scalarFieldIndicesIn);
         // const auto mS = mSe[scalarFieldIndicesIn[0]];
         const auto mS2 = mS*mS;

         const auto FBarFjSBar = VertexFBarFjSBar::evaluate(indexIn, context);
         const auto FBarFjSBarL = FBarFjSBar.left();
         const auto FBarFjSBarR = FBarFjSBar.right();

         const auto FiBarFS  = VertexFiBarFS::evaluate(indexOut, context);
         const auto FiBarFSL = FiBarFS.left();
         const auto FiBarFSR = FiBarFS.right();
         
         const std::complex<double> A1L =
         (FiBarFiVBarL*(mF*(FBarFjSBarL*FiBarFSL*mi + FBarFjSBarR*FiBarFSR*mj)*B0i(bb0,mj2,mF2,mS2) - 
       mj*(FBarFjSBarR*FiBarFSL*mi + FBarFjSBarL*FiBarFSR*mj)*B0i(bb1,mj2,mF2,mS2)))/(16.*(mi2 - mj2)*Power(Pi,2));

         const std::complex<double> A1R = 
         (FiBarFiVBarR*(mF*(FBarFjSBarR*FiBarFSR*mi + FBarFjSBarL*FiBarFSL*mj)*B0i(bb0,mj2,mF2,mS2) - 
       mj*(FBarFjSBarL*FiBarFSR*mi + FBarFjSBarR*FiBarFSL*mj)*B0i(bb1,mj2,mF2,mS2)))/(16.*(mi2 - mj2)*Power(Pi,2));

         res += std::valarray<std::complex<double>> {A1L, A1R};
      }
   }
   return res;
}

// emit V from the fermion in the loop
template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterF<Fj, Fi, V, F, S>::value(
      const typename field_indices<Fj>::type& indices_in, 
      const typename field_indices<Fi>::type& indices_out, 
      context_base const& context) {

   using VertexFBarFVBar  = Vertex<typename F::lorentz_conjugate, F, typename V::lorentz_conjugate>;
   using VertexFBarFjSBar = Vertex<typename F::lorentz_conjugate, Fj, typename S::lorentz_conjugate>;
   using VertexFiBarFS    = Vertex<typename Fi::lorentz_conjugate, F, S>;

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mj2 = mj*mj;
   const auto mi = context.mass<Fi>(indices_out);
   const auto mi2 = mi*mi;

   auto spectator_indices = default_indices_for_spectator<V>();

   //#include "/Users/Navir/masses.txt"
   std::valarray<std::complex<double>> res {0.0, 0.0};
   // loop over all possible particle "generations" attached to both vertices
   for (const auto& indexIn: index_range<VertexFBarFjSBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFS>()) {

         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFBarFjSBar::template indices_of_field<1>(indexIn);
         const auto iFieldIndices = VertexFiBarFS::template indices_of_field<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the scalar field in the loop
         const auto scalarFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<2>(indexIn);
         const auto scalarFieldIndicesOut = VertexFiBarFS::template indices_of_field<2>(indexOut);
         if (scalarFieldIndicesIn != scalarFieldIndicesOut)
            continue;

         // get FBarFVBar vertex
         const auto fermionFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFS::template indices_of_field<1>(indexOut);
         const auto indexFBarFVBar = concatenate(
            fermionFieldIndicesOut, fermionFieldIndicesIn,
            spectator_indices
         );
         const auto FBarFVBar = VertexFBarFVBar::evaluate(indexFBarFVBar, context);
         const auto FBarFVBarL = FBarFVBar.left();
         const auto FBarFVBarR = FBarFVBar.right();

         const auto mFB = context.mass<F>(fermionFieldIndicesIn);
         // const auto mFB = mChi[fermionFieldIndicesIn[0]];
         const auto mFB2 = mFB*mFB;
         const auto mFA = context.mass<F>(fermionFieldIndicesOut);
         // const auto mFA = mChi[fermionFieldIndicesOut[0]];
         const auto mFA2 = mFA*mFA;
         const auto mS = context.mass<S>(scalarFieldIndicesIn);
         // const auto mS = mSe[scalarFieldIndicesIn[0]];
         const auto mS2 = mS*mS;

         const auto FBarFjSBar  = VertexFBarFjSBar::evaluate(indexIn, context);
         const auto FBarFjSBarL = FBarFjSBar.left();
         const auto FBarFjSBarR = FBarFjSBar.right();

         const auto FiBarFS  = VertexFiBarFS::evaluate(indexOut, context);
         const auto FiBarFSL = FiBarFS.left();
         const auto FiBarFSR = FiBarFS.right();

         const std::complex<double> A1L = 
         -(-(FBarFjSBarL*FBarFVBarR*FiBarFSR*B0i(bb0,0,mFB2,mFA2)) + 
      FBarFjSBarL*FiBarFSR*(FBarFVBarL*mFA*mFB + FBarFVBarR*mj2 - FBarFVBarR*mS2)*
       C0i(cc0,0,mi2,mj2,mFB2,mFA2,mS2) + 2*FBarFjSBarL*FBarFVBarR*FiBarFSR*C0i(cc00,0,mi2,mj2,mFB2,mFA2,mS2) - 
      FBarFjSBarL*FBarFVBarR*FiBarFSR*mi2*C0i(cc1,0,mi2,mj2,mFB2,mFA2,mS2) + 
      FBarFjSBarL*FBarFVBarR*FiBarFSR*mj2*C0i(cc1,0,mi2,mj2,mFB2,mFA2,mS2) - 
      FBarFjSBarL*FBarFVBarR*FiBarFSR*mi2*C0i(cc12,0,mi2,mj2,mFB2,mFA2,mS2) + 
      FBarFjSBarL*FBarFVBarR*FiBarFSR*mj2*C0i(cc12,0,mi2,mj2,mFB2,mFA2,mS2) - 
      FBarFjSBarL*FBarFVBarL*FiBarFSL*mFB*mi*C0i(cc2,0,mi2,mj2,mFB2,mFA2,mS2) - 
      FBarFjSBarR*FBarFVBarL*FiBarFSR*mFA*mj*C0i(cc2,0,mi2,mj2,mFB2,mFA2,mS2) + 
      2*FBarFjSBarL*FBarFVBarR*FiBarFSR*mj2*C0i(cc2,0,mi2,mj2,mFB2,mFA2,mS2) + 
      FBarFjSBarR*FBarFVBarL*FiBarFSL*mi*mj*C0i(cc22,0,mi2,mj2,mFB2,mFA2,mS2) + 
      FBarFjSBarL*FBarFVBarR*FiBarFSR*mj2*C0i(cc22,0,mi2,mj2,mFB2,mFA2,mS2))/(16.*Power(Pi,2));

        const std::complex<double> A1R = 
        -(-(FBarFjSBarR*FBarFVBarL*FiBarFSL*B0i(bb0,0,mFB2,mFA2)) + 
      FBarFjSBarR*FiBarFSL*(FBarFVBarR*mFA*mFB + FBarFVBarL*mj2 - FBarFVBarL*mS2)*
       C0i(cc0,0,mi2,mj2,mFB2,mFA2,mS2) + 2*FBarFjSBarR*FBarFVBarL*FiBarFSL*C0i(cc00,0,mi2,mj2,mFB2,mFA2,mS2) - 
      FBarFjSBarR*FBarFVBarL*FiBarFSL*mi2*C0i(cc1,0,mi2,mj2,mFB2,mFA2,mS2) + 
      FBarFjSBarR*FBarFVBarL*FiBarFSL*mj2*C0i(cc1,0,mi2,mj2,mFB2,mFA2,mS2) - 
      FBarFjSBarR*FBarFVBarL*FiBarFSL*mi2*C0i(cc12,0,mi2,mj2,mFB2,mFA2,mS2) + 
      FBarFjSBarR*FBarFVBarL*FiBarFSL*mj2*C0i(cc12,0,mi2,mj2,mFB2,mFA2,mS2) - 
      FBarFjSBarR*FBarFVBarR*FiBarFSR*mFB*mi*C0i(cc2,0,mi2,mj2,mFB2,mFA2,mS2) - 
      FBarFjSBarL*FBarFVBarR*FiBarFSL*mFA*mj*C0i(cc2,0,mi2,mj2,mFB2,mFA2,mS2) + 
      2*FBarFjSBarR*FBarFVBarL*FiBarFSL*mj2*C0i(cc2,0,mi2,mj2,mFB2,mFA2,mS2) + 
      FBarFjSBarL*FBarFVBarR*FiBarFSR*mi*mj*C0i(cc22,0,mi2,mj2,mFB2,mFA2,mS2) + 
      FBarFjSBarR*FBarFVBarL*FiBarFSL*mj2*C0i(cc22,0,mi2,mj2,mFB2,mFA2,mS2))/(16.*Power(Pi,2));

         res += std::valarray<std::complex<double>> {A1L, A1R};
      }
   }
   return res;
}

// emit V from the scalar in the loop
template<class Fj, class Fi, class V, class F, class S>
std::valarray<std::complex<double>> FFVEmitterS<Fj, Fi, V, F, S>::value(
   const typename field_indices<Fj>::type& indices_in, 
   const typename field_indices<Fi>::type& indices_out, 
   context_base const& context) {

   using VertexSBarSVBar  = Vertex<typename S::lorentz_conjugate, S, typename V::lorentz_conjugate>;
   using VertexFBarFjSBar    = Vertex<typename F::lorentz_conjugate, Fj, typename S::lorentz_conjugate>;
   using VertexFiBarFS = Vertex<typename Fi::lorentz_conjugate, F, S>;

   auto spectator_indices = default_indices_for_spectator<V>();

   // masses of external fermions
   const auto mj = context.mass<Fj>(indices_in);
   const auto mj2 = mj*mj;
   const auto mi = context.mass<Fi>(indices_out);
   const auto mi2 = mi*mi;

   //#include "/Users/Navir/masses.txt"
   std::valarray<std::complex<double>> res {0.0, 0.0};
   // loop over all possible particle "generations" attached to both vertices
   for (const auto& indexIn: index_range<VertexFBarFjSBar>()) {
      for (const auto& indexOut: index_range<VertexFiBarFS>()) {

         // cycle if generations of external fermions  are different then requested   
         const auto jFieldIndices = VertexFBarFjSBar::template indices_of_field<1>(indexIn);
         const auto iFieldIndices = VertexFiBarFS::template indices_of_field<0>(indexOut);
         if (jFieldIndices != indices_in || iFieldIndices != indices_out)
            continue;

         // match indices of the fermion field in the loop
         const auto fermionFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<0>(indexIn);
         const auto fermionFieldIndicesOut = VertexFiBarFS::template indices_of_field<1>(indexOut);
         if (fermionFieldIndicesIn != fermionFieldIndicesOut)
            continue;

         // get SBarSVBar vertex 
         const auto scalarFieldIndicesIn = VertexFBarFjSBar::template indices_of_field<2>(indexIn);
         const auto scalarFieldIndicesOut = VertexFiBarFS::template indices_of_field<2>(indexOut);
         const auto indexSBarSVBar = concatenate(
            scalarFieldIndicesOut, scalarFieldIndicesIn, 
            spectator_indices
         );
         // not clear what the sign
         const auto SBarSVBar = VertexSBarSVBar::evaluate(indexSBarSVBar, context).value(0,1);

         const auto mF = context.mass<F>(fermionFieldIndicesIn);
         // const auto mF = mChi[fermionFieldIndicesIn[0]];
         const auto mF2 = mF*mF;
         const auto mSB = context.mass<S>(scalarFieldIndicesIn);
         // const auto mSB = mSe[scalarFieldIndicesIn[0]];
         const auto mSB2 = mSB*mSB;
         const auto mSA = context.mass<S>(scalarFieldIndicesOut);
         // const auto mSA = mSe[scalarFieldIndicesOut[0]];
         const auto mSA2 = mSA * mSA;

         const auto FBarFjSBar  = VertexFBarFjSBar::evaluate(indexIn, context);
         const auto FBarFjSBarL = FBarFjSBar.left();
         const auto FBarFjSBarR = FBarFjSBar.right();

         const auto FiBarFS  = VertexFiBarFS::evaluate(indexOut, context);
         const auto FiBarFSL = FiBarFS.left();
         const auto FiBarFSR = FiBarFS.right();

         const std::complex<double> A1L = 
         // -(FBarFjSBarL*FiBarFSR*SBarSVBar*MyC00(mF,mSA,mSB))/(8.*Power(Pi,2));
(SBarSVBar*(mF*(FBarFjSBarL*FiBarFSL*mi + FBarFjSBarR*FiBarFSR*mj)*C0i(cc0,mi2,0,mj2,mF2,mSA2,mSB2) - 
       2*FBarFjSBarL*FiBarFSR*C0i(cc00,mi2,0,mj2,mF2,mSA2,mSB2) + 
       FBarFjSBarL*FiBarFSL*mF*mi*C0i(cc1,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarL*FiBarFSR*mi2*C0i(cc1,mi2,0,mj2,mF2,mSA2,mSB2) + 
       FBarFjSBarR*FiBarFSR*mF*mj*C0i(cc1,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarR*FiBarFSL*mi*mj*C0i(cc1,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarL*FiBarFSR*mi2*C0i(cc11,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarR*FiBarFSL*mi*mj*C0i(cc11,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarL*FiBarFSR*mi2*C0i(cc12,mi2,0,mj2,mF2,mSA2,mSB2) - 
       2*FBarFjSBarR*FiBarFSL*mi*mj*C0i(cc12,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarL*FiBarFSR*mj2*C0i(cc12,mi2,0,mj2,mF2,mSA2,mSB2) + 
       FBarFjSBarL*FiBarFSL*mF*mi*C0i(cc2,mi2,0,mj2,mF2,mSA2,mSB2) + 
       FBarFjSBarR*FiBarFSR*mF*mj*C0i(cc2,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarR*FiBarFSL*mi*mj*C0i(cc2,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarL*FiBarFSR*mj2*C0i(cc2,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarR*FiBarFSL*mi*mj*C0i(cc22,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarL*FiBarFSR*mj2*C0i(cc22,mi2,0,mj2,mF2,mSA2,mSB2)))/(16.*Power(Pi,2));

         const std::complex<double> A1R = 
         (SBarSVBar*(mF*(FBarFjSBarR*FiBarFSR*mi + FBarFjSBarL*FiBarFSL*mj)*C0i(cc0,mi2,0,mj2,mF2,mSA2,mSB2) - 
       2*FBarFjSBarR*FiBarFSL*C0i(cc00,mi2,0,mj2,mF2,mSA2,mSB2) + 
       FBarFjSBarR*FiBarFSR*mF*mi*C0i(cc1,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarR*FiBarFSL*mi2*C0i(cc1,mi2,0,mj2,mF2,mSA2,mSB2) + 
       FBarFjSBarL*FiBarFSL*mF*mj*C0i(cc1,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarL*FiBarFSR*mi*mj*C0i(cc1,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarR*FiBarFSL*mi2*C0i(cc11,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarL*FiBarFSR*mi*mj*C0i(cc11,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarR*FiBarFSL*mi2*C0i(cc12,mi2,0,mj2,mF2,mSA2,mSB2) - 
       2*FBarFjSBarL*FiBarFSR*mi*mj*C0i(cc12,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarR*FiBarFSL*mj2*C0i(cc12,mi2,0,mj2,mF2,mSA2,mSB2) + 
       FBarFjSBarR*FiBarFSR*mF*mi*C0i(cc2,mi2,0,mj2,mF2,mSA2,mSB2) + 
       FBarFjSBarL*FiBarFSL*mF*mj*C0i(cc2,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarL*FiBarFSR*mi*mj*C0i(cc2,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarR*FiBarFSL*mj2*C0i(cc2,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarL*FiBarFSR*mi*mj*C0i(cc22,mi2,0,mj2,mF2,mSA2,mSB2) - 
       FBarFjSBarR*FiBarFSL*mj2*C0i(cc22,mi2,0,mj2,mF2,mSA2,mSB2)))/(16.*Power(Pi,2));
         
         res += std::valarray<std::complex<double>> {A1L, A1R};
      }
   }
   return res;
}
double MyC0(double m1, double m2, double m3) {
   if(is_zero(m1 - m2)) {
      return (-Power(m2,2) + Power(m3,2) + Power(m3,2)*Log(Power(m2,2)/Power(m3,2)))/Power(Power(m2,2) - Power(m3,2),2);
   }
  return (Power(m2,2)*Log(Power(m1,2)/Power(m2,2)))/((-Power(m1,2) + Power(m2,2))*(Power(m2,2) - Power(m3,2))) + 
   (Power(m3,2)*Log(Power(m1,2)/Power(m3,2)))/((-Power(m1,2) + Power(m3,2))*(-Power(m2,2) + Power(m3,2)));
}

double MyC2(double m1, double m2, double m3) {
   if(is_zero(m1-m2)) {
      return (Power(m2,4) - Power(m3,4) - 2*Power(m2,2)*Power(m3,2)*Log(Power(m2,2)/Power(m3,2)))/
   (2.*Power(Power(m2,2) - Power(m3,2),3));
   }
   return Power(m3,2)/(2.*(-Power(m1,2) + Power(m3,2))*(-Power(m2,2) + Power(m3,2))) + 
   (Power(m1,4)*Log(Power(m1,2)/Power(m3,2)))/
    (2.*(Power(m1,2) - Power(m2,2))*Power(Power(m1,2) - Power(m3,2),2)) + 
   (Power(m2,4)*Log(Power(m2,2)/Power(m3,2)))/(2.*(-Power(m1,2) + Power(m2,2))*Power(Power(m2,2) - Power(m3,2),2));
}

double MyC00(double m1, double m2, double m3) {
   const auto Mu = sqrt(getmudim());
   // std::cout << Mu << '\n'
   if(is_zero(m1-m2)) {
      return
      (-2*(Power(m1,4) - 2*Power(m1,2)*Power(m3,2))*Log(Power(m1,2)/Power(m3,2)) + 
     (Power(m1,2) - Power(m3,2))*(Power(m1,2) - 3*Power(m3,2) + 
        2*(Power(m1,2) - Power(m3,2))*Log(Power(Mu,2)/Power(m3,2))))/(8.*Power(Power(m1,2) - Power(m3,2),2));
   }
   if(is_zero(m2-m3)) {
      return 
      (-2*Power(m1,4)*Log(Power(m1,2)/Power(m2,2)) + 
     (Power(m1,2) - Power(m2,2))*(3*Power(m1,2) - Power(m2,2) + 
        2*(Power(m1,2) - Power(m2,2))*Log(Power(Mu,2)/Power(m2,2))))/(8.*Power(Power(m1,2) - Power(m2,2),2));
   }
   return
   0.375 - (Power(m1,4)*Log(Power(m1,2)/Power(m3,2)))/(4.*(Power(m1,2) - Power(m2,2))*(Power(m1,2) - Power(m3,2))) - 
   (Power(m2,4)*Log(Power(m2,2)/Power(m3,2)))/(4.*(-Power(m1,2) + Power(m2,2))*(Power(m2,2) - Power(m3,2))) + 
   Log(Power(Mu,2)/Power(m3,2))/4.;
}

} // anonymous namespace
