#include <fstream>
#include <string>
#include <iostream>

#include "@ModelName@_two_scale_spectrum_generator.hpp"
#include "@ModelName@_two_scale_model.hpp"
#include "decays/@ModelName@_decays.hpp"
#include "@ModelName@_slha_io.hpp"

int main(int argc, char* argv[])
{
  std::ifstream ifs(argv[1]);
  std::string slha_input( (std::istreambuf_iterator<char>(ifs) ),
                       (std::istreambuf_iterator<char>()    ) );

   std::stringstream istr(slha_input);

   using namespace flexiblesusy;
   @ModelName@_slha_io slha_io;
   slha_io.read_from_stream(istr);

   softsusy::QedQcd qedqcd;
   @ModelName@_input_parameters input;
   Spectrum_generator_settings settings;

   // extract the input parameters from spectrum string
   slha_io.fill(settings);
   slha_io.fill(qedqcd);
   slha_io.fill(input);

   @ModelName@_spectrum_generator<Two_scale> spectrum_generator;

   settings.set(Spectrum_generator_settings::calculate_sm_masses, 1.0);
   settings.set(Spectrum_generator_settings::calculate_bsm_masses, 1.0);
   settings.set(Spectrum_generator_settings::loop_library, 1.0);
   settings.set(Spectrum_generator_settings::calculate_decays, 1.0);
   spectrum_generator.set_settings(settings);

   spectrum_generator.run(qedqcd, input);

   @ModelName@_slha m = std::get<0>(spectrum_generator.get_models_slha());

   Loop_library::set(1);
   @ModelName@_decays decays(m, qedqcd, SM_higher_order_corrections::enable);
   decays.calculate_decays();

   const bool show_decays = !decays.get_problems().have_problem() ||
       settings.get(Spectrum_generator_settings::force_output);

   if (show_decays) {
      slha_io.set_dcinfo(decays.get_problems());
      slha_io.set_decays(decays.get_decay_table());
   }

   slha_io.write_to(argv[2]);

   return 0;
}
