// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_shooting_model.hpp
 * @brief contains class for model with routines needed to solve boundary
 *        value problem using the shooting solver by solving EWSB
 *        and determine the pole masses and mixings
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ (git commit: @FlexibleSUSYGitCommit@) and SARAH @SARAHVersion@ .
 */

#ifndef @ModelName@_SHOOTING_H
#define @ModelName@_SHOOTING_H

#include "@ModelName@_model.hpp"
#include "@ModelName@_model_slha.hpp"
#include "@ModelName@_input_parameters.hpp"

#include "model.hpp"

namespace flexiblesusy {

class Shooting;
/**
 * @class @ModelName@<Shooting>
 * @brief model class with routines for determining masses and mixings and EWSB
 */
template<>
class @ModelName@<Shooting> : public Model, public @ModelName@_slha {
public:
   explicit @ModelName@(const @ModelName@_input_parameters& input_ = @ModelName@_input_parameters(), bool do_convert_masses_to_slha = true);
   explicit @ModelName@(const @ModelName@_slha&, bool do_convert_masses_to_slha = true);
   @ModelName@(const @ModelName@&) = default;
   @ModelName@(@ModelName@&&) = default;
   virtual ~@ModelName@() = default;
   @ModelName@& operator=(const @ModelName@&) = default;
   @ModelName@& operator=(@ModelName@&&) = default;

   // interface functions
   virtual void calculate_spectrum() override;
   virtual void clear_problems() override;
   virtual std::string name() const override;
   virtual void run_to(double scale, double eps = -1.0) override;
   virtual void print(std::ostream&) const override;
   virtual void set_precision(double) override;
};

std::ostream& operator<<(std::ostream&, const @ModelName@<Shooting>&);

} // namespace flexiblesusy

#endif
