// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================


/**
 * @file @ModelName@_decays.hpp
 *
 * @brief contains class for calculating particle decays
 *
 * This file was generated with FlexibleSUSY @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#ifndef @ModelName@_DECAYS_H
#define @ModelName@_DECAYS_H

#include "config.h"

#include "@ModelName@_decay_table.hpp"
#include "@ModelName@_mass_eigenstates.hpp"
#include "cxx_qft/@ModelName@_qft.hpp"

#include "decays/flexibledecay_problems.hpp"
#include "decays/flexibledecay_settings.hpp"
#include "decays/decay_amplitudes.hpp"
#include "decays/decay.hpp"
#include "logger.hpp"
#include "lowe.h"
#include "physical_input.hpp"
#include "wrappers.hpp"

#include <cmath>
#include <vector>

namespace flexiblesusy {

class @ModelName@_decays {
public:
   @ModelName@_decays() = default;
   @ModelName@_decays(@ModelName@_mass_eigenstates model_, softsusy::QedQcd const& qedqcd_,
         Physical_input const& physical_input_,
         FlexibleDecay_settings const& flexibledecay_settings_)
      : model(model_)
      , qedqcd(qedqcd_)
      , physical_input(physical_input_)
      , flexibledecay_settings(flexibledecay_settings_)
      {}
   @ModelName@_decays(const @ModelName@_decays&) = default;
   @ModelName@_decays(@ModelName@_decays&&) = default;
   ~@ModelName@_decays() = default;
   @ModelName@_decays& operator=(const @ModelName@_decays&) = default;
   @ModelName@_decays& operator=(@ModelName@_decays&&) = default;

   const @ModelName@_decay_table& get_decay_table() const;
   const FlexibleDecay_problems& get_problems() const;

   void clear();
   void clear_problems();
   void calculate_decays();
#ifdef ENABLE_HIGGSTOOLS
   EffectiveCoupling_list get_higgstools_input() const {return higgstools_input;};
#endif

@decaysGetters@
@decaysCalculationPrototypes@

   template<typename FieldIn, typename FieldOut1, typename FieldOut2>
   double get_partial_width(
      const @ModelName@_cxx_diagrams::context_base&,
      typename cxx_diagrams::field_indices<FieldIn>::type const&,
      typename cxx_diagrams::field_indices<FieldOut1>::type const&,
      typename cxx_diagrams::field_indices<FieldOut2>::type const&);

@partialWidthCalculationPrototypes@

private:
   @ModelName@_mass_eigenstates model{};
   softsusy::QedQcd qedqcd{};
   Physical_input physical_input;
   FlexibleDecay_settings flexibledecay_settings {};
   static constexpr bool run_to_decay_particle_scale {true};
   @ModelName@_decay_table decay_table{};
   FlexibleDecay_problems problems{};
#ifdef ENABLE_HIGGSTOOLS
   EffectiveCoupling_list higgstools_input {};
#endif

   template<typename FieldIn, typename FieldOut1, typename FieldOut2>
   typename Decay_amplitude_type<FieldIn, FieldOut1, FieldOut2>::type
   calculate_amplitude(
      const @ModelName@_cxx_diagrams::context_base&,
      const typename cxx_diagrams::field_indices<FieldIn>::type&,
      const typename cxx_diagrams::field_indices<FieldOut1>::type&,
      const typename cxx_diagrams::field_indices<FieldOut2>::type&) const;

   template<typename FieldIn, typename FieldOut1, typename FieldOut2>
   double amplitude_squared(@ModelName@_cxx_diagrams::context_base const& context,
                  typename cxx_diagrams::field_indices<FieldIn>::type const& indexIn,
                  typename cxx_diagrams::field_indices<FieldOut1>::type const& indexOut1,
                  typename cxx_diagrams::field_indices<FieldOut2>::type const& indexOut2) const;

   double get_alphas(@ModelName@_cxx_diagrams::context_base const&) const;
   double get_alpha(@ModelName@_cxx_diagrams::context_base const&) const;
};

@calcAmplitudeSpecializationDecls@

template<typename FieldIn, typename FieldOut1, typename FieldOut2>
double
@ModelName@_decays::amplitude_squared(@ModelName@_cxx_diagrams::context_base const& context,
                  typename cxx_diagrams::field_indices<FieldIn>::type const& indexIn,
                  typename cxx_diagrams::field_indices<FieldOut1>::type const& indexOut1,
                  typename cxx_diagrams::field_indices<FieldOut2>::type const& indexOut2) const
{

   const auto mat_elem = calculate_amplitude<FieldIn, FieldOut1, FieldOut2>(
      context, indexIn, indexOut1, indexOut2);
   return mat_elem.square();
}

// generic decay of FieldIn -> FieldOut1 FieldOut2
template<typename FieldIn, typename FieldOut1, typename FieldOut2>
double @ModelName@_decays::get_partial_width(
   const @ModelName@_cxx_diagrams::context_base& context,
   typename cxx_diagrams::field_indices<FieldIn>::type const& indexIn,
   typename cxx_diagrams::field_indices<FieldOut1>::type const& indexOut1,
   typename cxx_diagrams::field_indices<FieldOut2>::type const& indexOut2)
{

   // on-shell masses
   const double mIn = context.physical_mass<FieldIn>(indexIn);
   const double mOut1 = context.physical_mass<FieldOut1>(indexOut1);
   const double mOut2 = context.physical_mass<FieldOut2>(indexOut2);

   // is decay kinematically allowed?
   if(mIn < mOut1 + mOut2) {
      problems.add_warning(
         create_process_string<FieldIn,FieldOut1,FieldOut2>(indexIn, indexOut1, indexOut2)
            + ": Called kinematically forbidden decay."
      );
      return 0.;
   }

   // phase space without symmetry factor
   const double ps = 1./(8.*Pi) * std::sqrt(KallenLambda(1., Sqr(mOut1/mIn), Sqr(mOut2/mIn)));

   // phase space symmetry factor
   const double ps_symmetry =
      final_state_symmetry_factor<FieldOut1, FieldOut2>(indexOut1, indexOut2);

   // color factor
   constexpr double color_factor = squared_color_generator<FieldIn, FieldOut1, FieldOut2>();

   // matrix element squared
   const auto mat_elem_sq = amplitude_squared<FieldIn, FieldOut1, FieldOut2>(
      context, indexIn, indexOut1, indexOut2);

   // flux * phase space factor * symmetry factor * color factor * |matrix element|^2
   const auto result = 0.5/mIn * ps * ps_symmetry * color_factor * mat_elem_sq;

   return result;
}

@partialWidthSpecializationDecls@

@higgstoolsChargedInputDecl@
} // namespace flexiblesusy

#endif
