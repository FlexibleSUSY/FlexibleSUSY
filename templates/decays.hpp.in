// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

/**
 * @file @ModelName@_decays.hpp
 *
 * @brief contains class for calculating particle decays
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ (git commit: @FlexibleSUSYGitCommit@) and SARAH @SARAHVersion@ .
 */

#ifndef @ModelName@_DECAYS_H
#define @ModelName@_DECAYS_H

#include "@ModelName@_decay_table.hpp"
#include "@ModelName@_mass_eigenstates.hpp"
#include "@ModelName@_mass_eigenstates_decoupling_scheme.hpp"
#include "@ModelName@_input_parameters.hpp"
#include "cxx_qft/@ModelName@_qft.hpp"


#include "@ModelName@_decay_amplitudes.hpp"
#include "decays_loop_corrections.hpp"
#include "decays_problems.hpp"
#include "effective_couplings.hpp"
#include "lowe.h"
#include "wrappers.hpp"
#include "error.hpp"

namespace flexiblesusy {

template <typename Field1, typename Field2>
double
final_state_symmetry_factor(typename @ModelName@_cxx_diagrams::field_indices<Field1>::type const& idx1,
                            typename @ModelName@_cxx_diagrams::field_indices<Field2>::type const& idx2)
{
   if (std::is_same<Field1, Field2>::value) {
      // TODO: we also compare if (potential) color indices are the same,
      //       this might cause problems if someone accidentaly initializes them
      //       differently
      if (boost::range::equal(idx1, idx2)) {
         return 0.5;
      }
   }
   return 1.;
}

enum class HigherOrderSMCorrections {enable, disable};


class @ModelName@_decays {
public:
   @ModelName@_decays() = default;
   @ModelName@_decays(@ModelName@_mass_eigenstates model_, softsusy::QedQcd const& qedqcd_, @ModelName@_input_parameters const& input_,
         HigherOrderSMCorrections enable_corrections = HigherOrderSMCorrections::enable)
      : model(model_)
      , input(input_)
      , qedqcd(qedqcd_)
      , include_higher_order_corrections(enable_corrections)
      {}
   @ModelName@_decays(const @ModelName@_decays&) = default;
   @ModelName@_decays(@ModelName@_decays&&) = default;
   ~@ModelName@_decays() = default;
   @ModelName@_decays& operator=(const @ModelName@_decays&) = default;
   @ModelName@_decays& operator=(@ModelName@_decays&&) = default;

   void set_loop_corrections(const Decays_loop_corrections&);
   const Decays_loop_corrections& get_loop_corrections() const;
   const @ModelName@_decay_table& get_decay_table() const;
   const Decays_problems& get_problems() const;

   void clear();
   void clear_problems();
   void calculate_decays();

@decaysGetters@
@decaysCalculationPrototypes@

@partialWidthCalculationPrototypes@

private:
   @ModelName@_mass_eigenstates model{};
   @ModelName@_input_parameters input{};
   softsusy::QedQcd qedqcd{};
   HigherOrderSMCorrections include_higher_order_corrections{HigherOrderSMCorrections::enable};
   bool run_to_decay_particle_scale {true};
   @ModelName@_decay_table decay_table{};
   Decays_loop_corrections loop_corrections{};
   Decays_problems problems{};

   template<typename FieldIn, typename FieldOut1, typename FieldOut2>
   typename Decay_amplitude_type<FieldIn, FieldOut1, FieldOut2>::type
   calculate_amplitude(
      const @ModelName@_cxx_diagrams::context_base&,
      const typename @ModelName@_cxx_diagrams::field_indices<FieldIn>::type&,
      const typename @ModelName@_cxx_diagrams::field_indices<FieldOut1>::type&,
      const typename @ModelName@_cxx_diagrams::field_indices<FieldOut2>::type&) const;

   template<typename FieldIn, typename FieldOut1, typename FieldOut2>
   double amplitude_squared(@ModelName@_cxx_diagrams::context_base const& context,
                  typename @ModelName@_cxx_diagrams::field_indices<FieldIn>::type const& indexIn,
                  typename @ModelName@_cxx_diagrams::field_indices<FieldOut1>::type const& indexOut1,
                  typename @ModelName@_cxx_diagrams::field_indices<FieldOut2>::type const& indexOut2) const;

   template<typename FieldIn, typename FieldOut1, typename FieldOut2>
   double get_partial_width(
      const @ModelName@_cxx_diagrams::context_base&,
      typename @ModelName@_cxx_diagrams::field_indices<FieldIn>::type const&,
      typename @ModelName@_cxx_diagrams::field_indices<FieldOut1>::type const&,
      typename @ModelName@_cxx_diagrams::field_indices<FieldOut2>::type const&) const;
};

@calcAmplitudeSpecializationDecls@

template<typename FieldIn, typename FieldOut1, typename FieldOut2>
double
@ModelName@_decays::amplitude_squared(@ModelName@_cxx_diagrams::context_base const& context,
                  typename @ModelName@_cxx_diagrams::field_indices<FieldIn>::type const& indexIn,
                  typename @ModelName@_cxx_diagrams::field_indices<FieldOut1>::type const& indexOut1,
                  typename @ModelName@_cxx_diagrams::field_indices<FieldOut2>::type const& indexOut2) const
{

   const auto mat_elem = calculate_amplitude<FieldIn, FieldOut1, FieldOut2>(
      context, indexIn, indexOut1, indexOut2);
   return mat_elem.square();
}

// returns a squared color generator for 3 point amplitude with FieldIn, FieldOut1 and FieldOut2
// the generator is guessed from color representations of FieldIn, FieldOut1 and FieldOut2
// This is not a bulletproof solution and might fail in general but is enough for
// decays of color singlets
template<typename FieldIn, typename FieldOut1, typename FieldOut2>
double squared_color_generator() {

   double color_factor;

   if(@ModelName@_cxx_diagrams::fields::is_singlet<FieldIn>::value) {
      // singlet to single singlet
      if(@ModelName@_cxx_diagrams::fields::is_singlet<FieldOut1>::value && @ModelName@_cxx_diagrams::fields::is_singlet<FieldOut2>::value) {
         color_factor = 1.;
      }
      // singlet to triplet and anti-triplet
      else if((@ModelName@_cxx_diagrams::fields::is_triplet<FieldOut1>::value && @ModelName@_cxx_diagrams::fields::is_anti_triplet<FieldOut2>::value) ||
            (@ModelName@_cxx_diagrams::fields::is_triplet<FieldOut2>::value && @ModelName@_cxx_diagrams::fields::is_anti_triplet<FieldOut1>::value)) {
         color_factor = 3.;
      }
      // singlet to octet octet
      else if(@ModelName@_cxx_diagrams::fields::is_octet<FieldOut1>::value && @ModelName@_cxx_diagrams::fields::is_octet<FieldOut2>::value) {
         color_factor = 8.;
      }
      // singlet to unhandlet color combination
      else {
         throw Error("Decay of color singlet to unhandled color combination");
      }
   // decays of color charged particles are currently not supported
   } else {
      throw Error("Color factors for decays of color charged particles are not supported");
   }

   return color_factor;
}

// generic decay of FieldIn -> FieldOut1 FieldOut2
template<typename FieldIn, typename FieldOut1, typename FieldOut2>
double @ModelName@_decays::get_partial_width(
   const @ModelName@_cxx_diagrams::context_base& context,
   typename @ModelName@_cxx_diagrams::field_indices<FieldIn>::type const& indexIn,
   typename @ModelName@_cxx_diagrams::field_indices<FieldOut1>::type const& indexOut1,
   typename @ModelName@_cxx_diagrams::field_indices<FieldOut2>::type const& indexOut2
   ) const
{
   using effective_couplings::KallenLambda;

   // onshell masses
   const double mIn = context.physical_mass<FieldIn>(indexIn);
   const double mOut1 = context.physical_mass<FieldOut1>(indexOut1);
   const double mOut2 = context.physical_mass<FieldOut2>(indexOut2);

   // phase space without symmetry factor
   const double ps = 1./(8.*Pi) * std::sqrt(KallenLambda(mIn*mIn, mOut1*mOut1, mOut2*mOut2))/(mIn*mIn);

   // phase space symmetry factor
   const double ps_symmetry =
      final_state_symmetry_factor<FieldOut1, FieldOut2>(indexOut1, indexOut2);

   // color factor
   const double color_factor = squared_color_generator<FieldIn, FieldOut1, FieldOut2>();

   // matrix element squared
   const auto mat_elem = calculate_amplitude<FieldIn, FieldOut1, FieldOut2>(
      context, indexIn, indexOut1, indexOut2);
   const auto mat_elem_sq = mat_elem.square();

   // flux * phase space factor * symmetry factor * color factor * |matrix element|^2
   return 0.5 * ps * ps_symmetry * color_factor * mat_elem_sq / mIn;
}

@partialWidthSpecializationDecls@

} // namespace flexiblesusy

#endif
