// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================


/**
 * @file @ModelName@_mass_eigenstates_running.hpp
 *
 * @brief Implements model class for running MS-bar/DR-bar parameters.
 *
 * This file was generated with FlexibleSUSY @FlexibleSUSYVersion@ and SARAH @SARAHVersion@ .
 */

#ifndef @ModelName@_MASS_EIGENSTATES_RUNNING_H
#define @ModelName@_MASS_EIGENSTATES_RUNNING_H

#include "@ModelName@_mass_eigenstates_interface.hpp"
#include "@ModelName@_mass_eigenstates.hpp"

#include <memory>

#include <Eigen/Core>

#define SUPER(p) @ModelName@_soft_parameters::p

namespace flexiblesusy {

class @ModelName@_mass_eigenstates_running
   : public @ModelName@_mass_eigenstates_interface
   , public @ModelName@_mass_eigenstates
{
public:
   @ModelName@_mass_eigenstates_running() = default;
   @ModelName@_mass_eigenstates_running(const @ModelName@_input_parameters&);
   @ModelName@_mass_eigenstates_running(const @ModelName@_mass_eigenstates&);

   ~@ModelName@_mass_eigenstates_running() override {}

   std::unique_ptr<@ModelName@_mass_eigenstates_interface> clone() const override;

   void calculate_tree_level_mass_spectrum() override;
   void calculate_pole_mass_spectrum() override;

   int solve_ewsb_equations_tree_level() override;
   int solve_ewsb_equations() override;

   const @ModelName@_input_parameters& get_input_parameters() const override;
   @ModelName@_input_parameters& get_input_parameters() override;
   Eigen::ArrayXd get_extra_parameters() const override;
   const @ModelName@_physical& get_physical() const override;
   @ModelName@_physical& get_physical() override;

   const Problems& get_problems() const override;
   Problems& get_problems() override;
   void clear_problems() override;

@[override]parameterGetters@
@[override]massGetters@
@[override]mixingMatrixGetters@
@[override]phasesGetterSetters@
@[override]extraParameterGetters@
@[override]dependencePrototypes@
@[override]selfEnergyPrototypes@
};
}

#endif
