// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

/**
 * @file @ModelName@_l_to_3l.cpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ and SARAH @SARAHVersion@
 */

#include <valarray>
#include <complex>

#include "@ModelName@_mass_eigenstates.hpp"
#include "cxx_qft/@ModelName@_qft.hpp"

#include "@ModelName@_l_to_3l.hpp"
#include "@ModelName@_FFV_form_factors.hpp"

#include "wrappers.hpp"

@npf_headers@

namespace flexiblesusy {

namespace @ModelName@_cxx_diagrams {
namespace npointfunctions {

@npf_definitions@

std::array<std::complex<double>,10> zero(
   const @ModelName@_mass_eigenstates&,
   const std::array<int,4>&,
   const std::array<Eigen::Vector4d,0>&){
   std::array<std::complex<double>,10> res{};
   return res;
}

} // namespace npointfunctions
} // namespace @ModelName@_cxx_diagrams

using namespace @ModelName@_cxx_diagrams;
using namespace @ModelName@_FFV_form_factors;

namespace @ModelName@_l_to_3l {

typedef std::valarray<std::complex<double>> (*ffv)(
   int, int, const @ModelName@_mass_eigenstates&, bool);

typedef std::array<std::complex<double>,10> (*npf)(
   const @ModelName@_mass_eigenstates&,
   const std::array<int,4>&,
   const std::array<Eigen::Vector4d,0>&);

/**
 * @tparam    Lepton type of a lepton field
 * @tparam    Photon type of a photon field
 * @tparam    photon function name for photon t-penguins
 * @tparam    rest   function name for other t-penguins
 * @tparam    boxes  function name for all box diagrams
 * @param[in] nI     generation of decaying lepton
 * @param[in] nO     generation of lepton, which can be separated from pair
 * @param[in] nA     generation of lepton and antilepton
 * @param[in] model  mass eigenstates
 * @param[in] qedqcd reference to low-enregy data
 * @returns observable value and Wilson coefficients used to derive it
 */
template<class Lepton, class Photon, ffv photon, npf rest, npf boxes>
Eigen::Array<std::complex<double>,13,1> forge(int nI, int nO, int nA,
   const @ModelName@_mass_eigenstates& model, const softsusy::QedQcd& qedqcd) {

   context_base context {model};

   auto coeffs = rest(model,
      std::array<int,4>{nI, nO, nA, nA},
      std::array<Eigen::Vector4d, 0>{});

   Eigen::Array<std::complex<double>,13,1> res;

   res << 0.0,
          0.0,
          0.0,
          coeffs[0],
          coeffs[1],
          coeffs[2],
          coeffs[3],
          coeffs[4],
          coeffs[5],
          coeffs[6],
          coeffs[7],
          -coeffs[8],
          -coeffs[9];
   return res;
}

@calc_definitions@

} // namespace @ModelName@_l_to_3l
} // namespace flexiblesusy
