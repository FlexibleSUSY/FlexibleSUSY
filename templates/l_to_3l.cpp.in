// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

/**
 * @file @ModelName@_l_to_3l.cpp
 *
 * This file was generated at @DateAndTime@ with FlexibleSUSY
 * @FlexibleSUSYVersion@ and SARAH @SARAHVersion@
 */

#include <valarray>
#include <complex>

#include "@ModelName@_mass_eigenstates.hpp"
#include "cxx_qft/@ModelName@_qft.hpp"

#include "@ModelName@_l_to_3l.hpp"
#include "@ModelName@_FFV_form_factors.hpp"

#include "wrappers.hpp"

#define NPF(name) fix_tensors_sign<name>(model, nI, nO, nA);
#define F4F(lepton, g) embed_photon<lepton, Photon>(model, form_factors, g);

@npf_headers@

namespace flexiblesusy {

namespace @ModelName@_cxx_diagrams {
namespace npointfunctions {

@npf_definitions@

std::array<std::complex<double>,10> zero(
   const @ModelName@_mass_eigenstates&,
   const std::array<int,4>&,
   const std::array<Eigen::Vector4d,0>&){
   std::array<std::complex<double>,10> res{};
   return res;
}

} // namespace npointfunctions
} // namespace @ModelName@_cxx_diagrams

using namespace @ModelName@_cxx_diagrams;
using namespace @ModelName@_FFV_form_factors;

namespace @ModelName@_l_to_3l {

typedef std::valarray<std::complex<double>> (*ffv)(
   int, int, const @ModelName@_mass_eigenstates&, bool);

typedef std::array<std::complex<double>,10> (*npf)(
   const @ModelName@_mass_eigenstates&,
   const std::array<int,4>&,
   const std::array<Eigen::Vector4d,0>&);


/**
 * @param[in] nI     Generation index of incoming lepton.
 * @return Total decay width in GeV, according to PDG data.
 */
double get_total_width(int nI) {
   // https://pdg.lbl.gov/2020/reviews/rpp2020-rev-phys-constants.pdf
   constexpr double hbar = 6.582119569e-25, // [GeV*s]
   // https://pdg.lbl.gov/2020/listings/rpp2020-list-muon.pdf
                    muon = 2.1969811e-6,    // [s]
   // https://pdg.lbl.gov/2020/listings/rpp2020-list-tau.pdf
                    tau  = 290.3e-15;       // [s]
   switch (nI) {
      case 1: return hbar/muon;
      case 2: return hbar/tau;
      default: throw std::invalid_argument("Unrecognized lepton");
   }
}

/**
 * @tparam    Lepton Type of a lepton field.
 * @tparam    Photon Type of a photon field.
 * @param[in] model  Mass eigenstates.
 * @param[in] nA     Generation index.
 * @return Left part of ffv coupling, multiplied by -i.
 */
template <class Lepton, class Photon>
std::complex<double> left(const @ModelName@_mass_eigenstates& model, int nA) {
    context_base context {model};
    using vertex = Vertex<typename Lepton::lorentz_conjugate, Lepton, Photon>;
    std::array<int, 2> indices {nA, nA};
    const auto value =  vertex::evaluate(indices, context);
    return value.left();
}

/**
 * @tparam    Lepton Type of a lepton field.
 * @tparam    Photon Type of a photon field.
 * @param[in] model  Mass eigenstates.
 * @param[in] nA     Generation index.
 * @return Right part of ffv coupling, multiplied by -i.
 */
template <class Lepton, class Photon>
std::complex<double> right(const @ModelName@_mass_eigenstates& model, int nA) {
    context_base context {model};
    using vertex = Vertex<typename Lepton::lorentz_conjugate, Lepton, Photon>;
    std::array<int, 2> indices {nA, nA};
    const auto value =  vertex::evaluate(indices, context);
    return value.right();
}

/**
 * @tparam    L     Type of a lepton field.
 * @tparam    A     Type of a photon field.
 * @tparam    T     Type of a form factors.
 * @param[in] model Mass eigenstates.
 * @param[in] ff    Lepton-photon form factors.
 * @param[in] g     Generation index for leptons.
 * @return Set of four-fermion coefficients from photon penguin amplitudes
 *         (without overall i; with appropriate embedding).
 */
template <class L, class A, class T>
Eigen::Array<std::complex<double>,10,1> embed_photon(
   const @ModelName@_mass_eigenstates& model, const T& ff, int g) {
   // Get quark-photon couplings (without i, as everywhere):
   const auto lL =  left<L, A>(model, g);
   const auto lR = right<L, A>(model, g);
   Eigen::Array<std::complex<double>,10,1> res{};
   // Minus comes from the form_factors embedding into four-fermion amplitude:
   res[4] = - ff[0] * lL;
   res[5] = - ff[0] * lR;
   res[6] = - ff[1] * lL;
   res[7] = - ff[1] * lR;
   return res;
};

/**
 * @tparam    Name  Function name for npf function.
 * @param[in] model Mass eigenstates.
 * @param[in] nI    Generation index for incoming lepton.
 * @param[in] nO    Generation index for outgoing lepton.
 * @param[in] nA    Generation index for lepton pair.
 * @return Set of four-fermion coefficients for non-photonic amplitudes
 *         (without overall i; with fixed signs for tensor operators).
 */
template <npf Name>
Eigen::Array<std::complex<double>,10,1> fix_tensors_sign(
   const @ModelName@_mass_eigenstates& model, int nI, int nO, int nA) {
   const auto npf = Name(model,
         std::array<int,4>{nI, nA, nO, nA},
         std::array<Eigen::Vector4d, 0>{});
   Eigen::Array<std::complex<double>,10,1> res(npf.data());
   res[8] = - res[8];
   res[9] = - res[9];
   return res;
};

/**
 * @tparam    A      Type of input sets of coefficients.
 * @param[in] photon T-coefficients of all penguins.
 * @param[in] res    T-coefficients of all penguins.
 * @param[in] boxes  Coefficients of all boxes.
 * @return Wilson coefficients of four fermion operators.
 */
template<class A>
Eigen::Array<std::complex<double>,10,1> fierz(A photon, A rest, A box) {
   A sum = photon + rest;
   sum << sum[0]/2 - 6*sum[8],
          sum[1] - 2*sum[5],
          sum[2] - 2*sum[6],
          sum[3]/2 - 6*sum[9],
          2*sum[4],
          sum[5] - sum[1]/2,
          sum[6] - sum[2]/2,
          2*sum[7],
          1.5*sum[8] - sum[0]/8,
          1.5*sum[9] - sum[3]/8;
   sum = sum + box;
   A res{};
   res << 2*sum[0],
          0,
          0,
          2*sum[3],
          sum[4]/2,
          sum[5],
          sum[6],
          sum[7]/2,
          0,
          0;
   return res;
}

/**
 * @tparam    Lepton Type of a lepton field.
 * @tparam    Photon Type of a photon field.
 * @tparam    Factor Function name for photon t-penguins.
 * @tparam    Rest   Function name for other t-penguins.
 * @tparam    Boxes  Function name for all box diagrams.
 * @param[in] nI     Generation of decaying lepton.
 * @param[in] nO     Generation of lepton, which can be separated from pair.
 * @param[in] nA     Generation of lepton and antilepton.
 * @param[in] model  Mass eigenstates.
 * @param[in] qedqcd Reference to low-energy data.
 * @return Observable value and Wilson coefficients used to derive it.
 */
template<class Lepton, class Photon, ffv Factor, npf Rest, npf Boxes>
Eigen::Array<std::complex<double>,13,1> forge(int nI, int nO, int nA,
   const @ModelName@_mass_eigenstates& model, const softsusy::QedQcd& qedqcd) {

   context_base context {model};

   const auto form_factors = Factor(nI, nO, model, false);
   const auto photon_amp = F4F(Lepton, nA);

   // Full amplitude is calculated with the following convention (for the case
   // 4!=3, otherwise Fierz transformations should be used hep-ph/0412245, note
   // the half for every sigma-sigma summation in eqs. 40 and 42):
   //    <out:4,3| T exp(i L_full dx) |in:2,1> = i * npf,
   // which means, that it has to be matched with -1 * C_XY, because
   //    <out:4,3| T exp(i L_low dx) |in:2,1> = -i * C_XY [3 X 1]*[4 Y 2].
   const auto t_amp = NPF(Rest);
   const auto box_amp = NPF(Boxes);

   // If final leptons are the same, then we need to add u-penguins as well. If
   // not, then we can just sum them (we always calculate all boxes in npf).
   auto CXYl = (nO == nA) ? fierz(photon_amp, t_amp, box_amp)
                          : photon_amp + t_amp + box_amp;
   // Matching
   const auto DL = - 0.5 * form_factors[2];
   const auto DR = - 0.5 * form_factors[3];
   CXYl = - CXYl;

   Eigen::Array<std::complex<double>,13,1> res;

   const double total_width = get_total_width(nI);

   // @todo Add calculate functions

   res << 0.0/total_width,
          DL,
          DR,
          CXYl[0],
          CXYl[1],
          CXYl[2],
          CXYl[3],
          CXYl[4],
          CXYl[5],
          CXYl[6],
          CXYl[7],
          CXYl[8],
          CXYl[9];

   return res;
}

@calc_definitions@

} // namespace @ModelName@_l_to_3l
} // namespace flexiblesusy
