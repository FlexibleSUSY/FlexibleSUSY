// ====================================================================
// This file is part of FlexibleSUSY.
//
// FlexibleSUSY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published
// by the Free Software Foundation, either version 3 of the License,
// or (at your option) any later version.
//
// FlexibleSUSY is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with FlexibleSUSY.  If not, see
// <http://www.gnu.org/licenses/>.
// ====================================================================

// File generated at @DateAndTime@

#include "@ModelName@_shooting_spectrum_generator.hpp"
#include "@ModelName@_input_parameters.hpp"
// #include "@ModelName@_shooting_convergence_tester.hpp"
#include "@ModelName@_shooting_ewsb_solver.hpp"
// #include "@ModelName@_shooting_initial_guesser.hpp"
// #include "@ModelName@_shooting_susy_scale_constraint.hpp"
#include "@ModelName@_standard_model_matching.hpp"
// #include "@ModelName@_standard_model_two_scale_matching.hpp"
#include "standard_model_shooting_low_scale_constraint.hpp"

#include "error.hpp"
#include "lowe.h"
#include "numerics2.hpp"

#include <limits>

namespace flexiblesusy {

double @ModelName@_spectrum_generator<Shooting>::get_pole_mass_scale(double susy_scale) const
{
   return settings.get(Spectrum_generator_settings::pole_mass_scale) != 0. ?
      settings.get(Spectrum_generator_settings::pole_mass_scale) :
      susy_scale;
}

double @ModelName@_spectrum_generator<Shooting>::get_eft_pole_mass_scale(double susy_scale, double Mt) const
{
   double Q_higgs =
      settings.get(Spectrum_generator_settings::eft_pole_mass_scale);

   if (Q_higgs == 0.)
      Q_higgs = std::min(susy_scale, Mt);

   return Q_higgs;
}

/**
 * @brief Run's the RG solver with the given input parameters
 *
 * This function sets up the RG solver using a susy-scale
 * and low-scale constraint.  Afterwards the solver is run until
 * convergence is reached or an error occours.  Finally the particle
 * spectrum (pole masses) is calculated.
 *
 * @param qedqcd Standard Model input parameters
 * @param input model input parameters
 */
void @ModelName@_spectrum_generator<Shooting>::run_except(const softsusy::QedQcd& qedqcd,
                                const @ModelName@_input_parameters& input)
{
   VERBOSE_MSG("Solving BVP using shooting solver");

   problems.set_bvp_solver_problems({ BVP_solver_problems("ShootingSolver") });

   auto& model = this->model;
   model.clear();
   model.set_input_parameters(input);
   model.do_calculate_sm_pole_masses(
      settings.get(Spectrum_generator_settings::calculate_sm_masses));
   model.do_calculate_bsm_pole_masses(
      settings.get(Spectrum_generator_settings::calculate_bsm_masses));
   model.do_force_output(
      settings.get(Spectrum_generator_settings::force_output));
   model.set_loops(settings.get(Spectrum_generator_settings::beta_loop_order));
   model.set_thresholds(
      settings.get(
         Spectrum_generator_settings::threshold_corrections_loop_order));
   model.set_zero_threshold(
      settings.get(Spectrum_generator_settings::beta_zero_threshold));

   eft.clear();
   eft.do_force_output(
      settings.get(Spectrum_generator_settings::force_output));
   eft.set_loops(settings.get(Spectrum_generator_settings::beta_loop_order));
   eft.set_thresholds(
      settings.get(
         Spectrum_generator_settings::threshold_corrections_loop_order));
   eft.set_zero_threshold(
      settings.get(Spectrum_generator_settings::beta_zero_threshold));
   eft.set_pole_mass_loop_order(this->model.get_pole_mass_loop_order());
   eft.set_ewsb_loop_order(this->model.get_ewsb_loop_order());
   eft.set_ewsb_iteration_precision(this->model.get_ewsb_iteration_precision());
   eft.set_loop_corrections(this->model.get_loop_corrections());
   eft.set_threshold_corrections(this->model.get_threshold_corrections());

   @ModelName@_ewsb_solver<Shooting> ewsb_solver;
   model.set_ewsb_solver(
      std::make_shared<@ModelName@_ewsb_solver<Shooting> >(ewsb_solver));

   standard_model::Standard_model_low_scale_constraint<Shooting>
      low_scale_constraint(&eft, qedqcd);
   low_scale_constraint.initialize();

   susy_scale = low_scale = 0.;

   // RGFlow<Shooting> solver;
   // solver.reset();
   // solver.set_convergence_tester(&convergence_tester);
   // solver.set_running_precision(&precision);
   // solver.set_initial_guesser(&initial_guesser);
   // solver.add(&low_scale_constraint, &model);
   // solver.add(&susy_scale_constraint, &model);
   // solver.solve();

   // impose low-scale constraint one last time
   model.run_to(low_scale_constraint.get_scale());
   low_scale_constraint.apply();

   // susy_scale = susy_scale_constraint.get_scale();
   low_scale  = low_scale_constraint.get_scale();

   const double Mt = qedqcd.displayPoleMt();

   calculate_spectrum(Mt);

   // run to output scale (if scale > 0)
   if (!is_zero(parameter_output_scale)) {
      model.run_to(parameter_output_scale);
      eft.run_to(parameter_output_scale);
   }
}

/**
 * Create a text file which contains the values of all model
 * parameters at all scales between the low-scale and the high-scale.
 *
 * @param filename name of output file
 */
void @ModelName@_spectrum_generator<Shooting>::write_running_couplings(
   const std::string& filename) const
{
   @ModelName@_spectrum_generator_interface<Shooting>::write_running_couplings(
      filename, get_low_scale(), get_susy_scale());
}

void @ModelName@_spectrum_generator<Shooting>::calculate_spectrum(double Mt)
{
   model.run_to(get_pole_mass_scale(susy_scale));
   model.solve_ewsb();
   model.calculate_spectrum();

   eft.run_to(get_eft_pole_mass_scale(susy_scale, Mt));

   // computation of pole mass spectrum in the SM
   const int eft_pole_loops = eft.get_pole_mass_loop_order();
   const int eft_ewsb_loops = eft.get_ewsb_loop_order();

   eft.calculate_DRbar_masses();
   eft.solve_ewsb();
   eft.calculate_spectrum();

   eft.set_pole_mass_loop_order(eft_pole_loops);
   eft.set_ewsb_loop_order(eft_ewsb_loops);

   const int index = settings.get(Spectrum_generator_settings::eft_higgs_index);

   model.get_physical().M@HiggsBoson_index@ = eft.get_physical().Mhh;
   model.get_physical().M@VectorZ_0@ = eft.get_physical().MVZ;
   model.get_physical().M@VectorW_0@ = eft.get_physical().MVWp;
@fillSMFermionPoleMasses@
   if (eft.get_problems().is_running_tachyon(standard_model_info::hh))
      model.get_problems().flag_running_tachyon(@ModelName@_info::@HiggsBoson@);
   if (eft.get_problems().is_pole_tachyon(standard_model_info::hh))
      model.get_problems().flag_pole_tachyon(@ModelName@_info::@HiggsBoson@);
   if (eft.get_problems().is_running_tachyon(standard_model_info::VZ))
      model.get_problems().flag_running_tachyon(@ModelName@_info::@VectorZ@);
   if (eft.get_problems().is_pole_tachyon(standard_model_info::VZ))
      model.get_problems().flag_pole_tachyon(@ModelName@_info::@VectorZ@);
   if (eft.get_problems().is_running_tachyon(standard_model_info::VWp))
      model.get_problems().flag_running_tachyon(@ModelName@_info::@VectorW@);
   if (eft.get_problems().is_pole_tachyon(standard_model_info::VWp))
      model.get_problems().flag_pole_tachyon(@ModelName@_info::@VectorW@);
}

} // namespace flexiblesusy
